<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meng Fanze</title>
    <description>求知，思考，高效生活</description>
    <link>http://iFanze.cn//</link>
    <atom:link href="http://iFanze.cn//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 30 May 2016 00:36:05 +0800</pubDate>
    <lastBuildDate>Mon, 30 May 2016 00:36:05 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（四）：高并发优化</title>
        <description>&lt;p&gt;注：续前文。这两天去上海参加了华测的一个参观交流活动，感觉比起同样前途光明的GIS行业，还是互联网更适合我呢。刚回来就发现慕课网这个视频最后一部分更新啦~赶快把第一章综述的内容看了看，大致了解了下高并发产生的瓶颈和CDN、Redis、存储过程等在进行并发优化的作用等等。做笔记如下。具体的编码我想等到自己把前面三课的内容实现了之后再继续学习吧。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;高并发优化分析&lt;/h2&gt;

&lt;p&gt;分析可能产生高并发的地方：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645378066039.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;详情页&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/14645378988870.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用CDN（内容分发网络）来加速用户获取数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般部署在离用户最近的网络节点上&lt;/li&gt;
  &lt;li&gt;命中CDN不需要访问后端服务器&lt;/li&gt;
  &lt;li&gt;互联网公司会自己搭建，或租用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;获取系统时间&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;获取系统时间不用优化：因为Java服务器访问一次内存大约只有10ns。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;秒杀地址接口分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;无法使用CDN缓存&lt;/li&gt;
  &lt;li&gt;适合服务器缓存：redis等（1wQPS）&lt;/li&gt;
  &lt;li&gt;一致性维护成本低（超时穿透/主动更新）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645381091286.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;秒杀操作优化分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;无法使用CDN缓存&lt;/li&gt;
  &lt;li&gt;后端缓存困难：库存问题，要通过MySQL的事务保证一致性。&lt;/li&gt;
  &lt;li&gt;一行数据竞争：热点商品&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;其他方案分析&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645365894875.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以扛住非常非常高的并发，腾讯阿里常用&lt;/li&gt;
  &lt;li&gt;运维成本和稳定性：NoSQL、MQ等都是分布式服务，不如MySQL稳定。需要一个强大的运维团队&lt;/li&gt;
  &lt;li&gt;开发成本：数据一致性，回滚方案等。工程师对这些要非常熟悉&lt;/li&gt;
  &lt;li&gt;幂等性难保证：重复秒杀问题。加大成本&lt;/li&gt;
  &lt;li&gt;是一个不适合新生的架构，主要因为如上这些成本性问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cg&quot;&gt;网络延迟和CG&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;对MySQL一条update进行压力测试：约4wQPS——不算低&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java控制事务行为分析：
&lt;img src=&quot;/images/posts/14645385010686.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;瓶颈分析：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645385711091.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Java GC：Garbage Collection，垃圾回收机制。Java + SQL + 网络延迟 + GC  ：这些共同导致低效&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;优化分析：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;行级锁在Commit之后释放&lt;/li&gt;
  &lt;li&gt;优化方向：减少行级锁持有时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;延迟分析（同城机房和异地机房）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645372241542.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/posts/14645372413927.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;如何判断Update成功？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Update自身没报错&lt;/li&gt;
  &lt;li&gt;客户端确认Update影响记录数&lt;/li&gt;
  &lt;li&gt;优化思路：把客户端逻辑放在MySQL服务器端，避免网络延迟和GC影响&lt;/li&gt;
  &lt;li&gt;两种解决方案：修改源码定制SQL方案；使用存储过程让整个事务在MySQL端完成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-8&quot;&gt;优化总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;前端控制：暴露接口，按钮防重复&lt;/li&gt;
  &lt;li&gt;动静态数据分离：CDN缓存，后端缓存&lt;/li&gt;
  &lt;li&gt;事务竞争优化：减少事务锁时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis后端缓存优化编码&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;并发优化&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;系统部署架构&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;课程总结&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

</description>
        <pubDate>Sun, 29 May 2016 23:55:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E5%9B%9B-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E5%9B%9B-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/</guid>
        
        <category>Java</category>
        
        <category>高并发</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>Laravel v5.2 框架学习笔记</title>
        <description>&lt;p&gt;注：写完上一篇ThinkPHP框架，再写一篇Laravel框架的学习笔记感觉好怪异。主要是因为在知乎上看到了一些PHP框架相关的讨论，有很多人力推Laravel，又说ThinkPHP哪里怎么怎么不合理，代码质量一般，风格糟糕等等……然后就打开Laravel官网看了一眼，仅仅是打开看了一眼，我就决定抛弃掉ThinkPHP转投看着很高大上的Laravel了！！&lt;/p&gt;

&lt;p&gt;注2：新开一段理智下来，Laravel更显专业、成熟，学着更具挑战性，我还可能会从其优秀的代码风格中受益，框架自身也足够稳定。当然也不是说ThinkPHP就不好，或许用来写一般的应用同样简洁高效，并且是国产基因，有中文文档，这些都是他的优点。&lt;/p&gt;

&lt;p&gt;注3：这里记录下官方文档里最基础的几篇，可以快速入门，了解基本运行流程并新建一个涉及简单数据库读写的站点。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;需要使用Composer，这个在上次装ThinkPHP的时候已经装了。不使用国内的镜像的话安装速度会很慢。
- 使用Laravel installer：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require &lt;span class=&quot;s2&quot;&gt;&quot;laravel/install&quot;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# laravel会被安装到：~/.composer/verdor/bin，把它加入PATH&lt;/span&gt;
laravel new blog    &lt;span class=&quot;c&quot;&gt;# 创建一个项目，目录名称为blog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用composer create-project：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer create-project --prefer-dist laravel/laravel blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;配置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;配置文件位于&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;目录。&lt;/li&gt;
  &lt;li&gt;可能要配置Web服务器对&lt;code class=&quot;highlighter-rouge&quot;&gt;storage&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap/cache&lt;/code&gt;目录的访问权限。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;里设置32字符长的Application Kye。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;配置的访问&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$value = config(&#39;app.timezone&#39;);                //可以再设置默认值
config([&#39;app.timezone&#39; =&amp;gt; &#39;America/Chicago&#39;]);  //运行时更改设置
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;环境配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;中配置环境信息，其中&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_ENV&lt;/code&gt;即是环境名。&lt;/li&gt;
  &lt;li&gt;配置会读取到&lt;code class=&quot;highlighter-rouge&quot;&gt;$_ENV&lt;/code&gt;里，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;env(&#39;APP_DEBUG&#39;, false)&lt;/code&gt;的形式读取。第二个参数是默认值。&lt;/li&gt;
  &lt;li&gt;这个文件不要使用版本控制，而应该添加&lt;code class=&quot;highlighter-rouge&quot;&gt;.env.example&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;可以在代码中这样进行判断当前的环境：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$environment = App::environment();
//或者
if(App::environment(&#39;local&#39;, &#39;staging&#39;)){
    // 环境是local或者staging
}
//或者
$environment = app()-&amp;gt;environment();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;为了提升性能，在生产环境中定期运行&lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan config:cache&lt;/code&gt;命令将配置文件转成单个文件，在开发环境中不用。&lt;/li&gt;
  &lt;li&gt;开启Maintenance Mode，可以对所有请求展示一个自定义视图，默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;resources/views/errors/503.blade.php&lt;/code&gt;。应在系统维护期使用。（&lt;a href=&quot;https://laravel.com/docs/5.2/configuration#maintenance-mode&quot;&gt;更多：关于队列任务和zero-downtime发布的实现&lt;/a&gt;）开启和关闭的指令分别是：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan down
php artisan up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;homestead&quot;&gt;Homestead&lt;/h2&gt;

&lt;p&gt;一个开发用的虚拟机，感觉很厉害的样子。&lt;a href=&quot;https://laravel.com/docs/5.2/homestead&quot;&gt;更多相关&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;valet&quot;&gt;Valet&lt;/h2&gt;

&lt;p&gt;一个Mac上开发用的虚拟机，好像比上面一个还好用。&lt;a href=&quot;https://laravel.com/docs/5.2/valet&quot;&gt;更多相关&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-task-list&quot;&gt;教程：Basic Task List&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;新建工程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer create-project laravel/laravel quickstart --prefer-dist
&lt;span class=&quot;c&quot;&gt;# 或&lt;/span&gt;
laravel new quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;克隆成品(可选)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/laravel/quickstart-basic quickstart
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;quickstart
composer install
php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;准备数据库&lt;/h3&gt;

&lt;h4 id=&quot;database-migrations&quot;&gt;Database Migrations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;使用数据库Migrations来定义数据库的结构和编辑。&lt;/li&gt;
  &lt;li&gt;使用一下命令生成一个新的数据库Migration：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:migration create_tasks_table --create&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tasks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;打开生成在&lt;code class=&quot;highlighter-rouge&quot;&gt;database/migrations&lt;/code&gt;下的文件，增加一个string列：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function up()
{
   Schema::create(&#39;tasks&#39;, function (Blueprint $table) {
       $table-&amp;gt;increments(&#39;id&#39;);
       $table-&amp;gt;string(&#39;name&#39;);
       $table-&amp;gt;timestamps();
   });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;执行migrate：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;eloquent&quot;&gt;Eloquent模型&lt;/h4&gt;

&lt;p&gt;这是Laravel默认的ORM(Object-relation mapper)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用以下命令为我们刚刚建立在&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt;数据库中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;模型进行模型生成，生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;Task.php&lt;/code&gt;位于&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;目录下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:model Task
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;路由&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认全部定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/routes.php&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;这里我们需要三种路由：查看任务列表、添加任务、删除任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use App\Task;
use Illuminate\Http\Request;

Route::get(&#39;/&#39;, function () {
    return view(&#39;tasks&#39;);   //位于resources/views/tasks.blade.php
});

Route::post(&#39;/task&#39;, function (Request $request) {
    //
});

Route::delete(&#39;/task/{task}&#39;, function (Task $task) {
    //
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;布局和视图&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.blade.php&lt;/code&gt;代表使用Blade模板引擎。&lt;/li&gt;
  &lt;li&gt;建立模板页&lt;code class=&quot;highlighter-rouge&quot;&gt;resources/views/layouts/app.blade.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Laravel Quickstart - Basic&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CSS And JavaScript --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar navbar-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Navbar Contents --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        @yield(&#39;content&#39;)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;建立视图页&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;页：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@extends(&#39;layouts.app&#39;)

@section(&#39;content&#39;)

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Bootstrap Boilerplate... --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Display Validation Errors --&amp;gt;&lt;/span&gt;
        @include(&#39;common.errors&#39;)

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- New Task Form --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-horizontal&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            

            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Task Name --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-3 control-label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Task&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task-name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add Task Button --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-offset-3 col-sm-6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-plus&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Add Task
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TODO: Current Tasks --&amp;gt;&lt;/span&gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;添加任务&lt;/h3&gt;

&lt;h4 id=&quot;section-10&quot;&gt;表单验证&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::post&lt;/code&gt;函数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::post(&#39;/task&#39;, function (Request $request) {
    $validator = Validator::make($request-&amp;gt;all(), [
        &#39;name&#39; =&amp;gt; &#39;required|max:255&#39;,
    ]);

    if ($validator-&amp;gt;fails()) {
        return redirect(&#39;/&#39;)
            -&amp;gt;withInput()
            -&amp;gt;withErrors($validator);
    }

    // Create The Task...
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意，错误的输入和错误信息会在重定向到&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;后放入到session，这样就可以保持用户的输入状态。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withErrors($validator)&lt;/code&gt;函数使得我们可以在view中通过&lt;code class=&quot;highlighter-rouge&quot;&gt;$errors&lt;/code&gt;访问出错信息。&lt;code class=&quot;highlighter-rouge&quot;&gt;common.errors&lt;/code&gt;被包含在了我们之前写的&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;页面中：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- resources/views/common/errors.blade.php --&amp;gt;&lt;/span&gt;

@if (count($errors) &amp;gt; 0)
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Form Error List --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert alert-danger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Whoops! Something went wrong!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            @foreach ($errors-&amp;gt;all() as $error)
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            @endforeach
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
@endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-11&quot;&gt;创建任务&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;继续完善&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::post&lt;/code&gt;方法，保存正确的数据到数据库：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::post(&#39;/task&#39;, function (Request $request) {
    $validator = Validator::make($request-&amp;gt;all(), [
        &#39;name&#39; =&amp;gt; &#39;required|max:255&#39;,
    ]);

    if ($validator-&amp;gt;fails()) {
        return redirect(&#39;/&#39;)
            -&amp;gt;withInput()
            -&amp;gt;withErrors($validator);
    }

    $task = new Task;
    $task-&amp;gt;name = $request-&amp;gt;name;
    $task-&amp;gt;save();

    return redirect(&#39;/&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-12&quot;&gt;查看所有任务&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;路径：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;/&#39;, function () {
    $tasks = Task::orderBy(&#39;created_at&#39;, &#39;asc&#39;)-&amp;gt;get();

    return view(&#39;tasks&#39;, [
        &#39;tasks&#39; =&amp;gt; $tasks
    ]); //第二个参数：数组中每个key都可在视图模板中作为变量访问
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;编写&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@extends(&#39;layouts.app&#39;)

@section(&#39;content&#39;)
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Create Task Form... --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Current Tasks --&amp;gt;&lt;/span&gt;
    @if (count($tasks) &amp;gt; 0)
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                Current Tasks
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table table-striped task-table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table Headings --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Task&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table Body --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
                        @foreach ($tasks as $task)
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Task Name --&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;

                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TODO: Delete Button --&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                        @endforeach
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    @endif
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-13&quot;&gt;删除任务&lt;/h3&gt;

&lt;h4 id=&quot;section-14&quot;&gt;添加删除按钮&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;tr&amp;gt;
    &amp;lt;!-- Task Name --&amp;gt;
    &amp;lt;td class=&quot;table-text&quot;&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;

    &amp;lt;!-- Delete Button --&amp;gt;
    &amp;lt;td&amp;gt;
        &amp;lt;form action=&quot;&quot; method=&quot;POST&quot;&amp;gt;
            
            

            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&amp;gt;
                &amp;lt;i class=&quot;fa fa-trash&quot;&amp;gt;&amp;lt;/i&amp;gt; Delete
            &amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意，HTML表单的method只能是GET或者POST，所以这里不能用DELETE，而是用``生成&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&#39;hidden&#39; name=&#39;_method&#39; value=&#39;DELETE&#39;&lt;/code&gt;交给Laravel后台解析。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-15&quot;&gt;删除操作&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;/task/{task}&lt;/code&gt;，这里使用了model binding的方式自动去除{task}作为形参，表示要删除的对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::delete(&#39;/task/{task}&#39;, function (Task $task) {
    $task-&amp;gt;delete();

    return redirect(&#39;/&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 27 May 2016 02:12:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>【慕课网】快速入门ThinkPHP框架——理论篇</title>
        <description>&lt;p&gt;注：这是慕课网视频“快速入门ThinkPHP框架——理论篇”的笔记。之前做项目用的MVC框架是自己手写的，ThinkPHP也算是PHP框架里比较知名的了，这次体验一下。因为之前已经有MVC的基础了，一天时间就把这个视频刷完了。这里记录的算是CheatSheet吧，供以后查阅。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;框架是什么&lt;/h2&gt;

&lt;p&gt;框架是程序结构代码的集合，而不是业务逻辑代码。
ThinkPHP：国产、开源、面向对象、MVC、查询语言丰富、详尽的文档、中文注释。&lt;/p&gt;

&lt;h2 id=&quot;thinkphp&quot;&gt;ThinkPHP基础&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;建立简单项目，了解运行流程&lt;/li&gt;
  &lt;li&gt;URL模式，简历自定义函数库&lt;/li&gt;
  &lt;li&gt;模板技术，调试模式和运行状态&lt;/li&gt;
  &lt;li&gt;数据库常用操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;单一入口框架&lt;/h2&gt;

&lt;p&gt;在一个网站中，所有请求都是指向一个脚本文件。使得项目结构规范，控制灵活，更加安全。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;创建项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;把下载到的&lt;code class=&quot;highlighter-rouge&quot;&gt;ThinkPHP&lt;/code&gt;目录放在网站根目录，新建&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;APP_NAME&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;App&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;APP_PATH&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./App/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//注意斜线。
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./ThinkPHP/ThinkPHP.php&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;访问一次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;目录结构&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Commom：公共函数&lt;/li&gt;
  &lt;li&gt;Conf：配置文件&lt;/li&gt;
  &lt;li&gt;Lang：语言包&lt;/li&gt;
  &lt;li&gt;Lib：控制器和模型（Action、Behavior、Model、Widget）&lt;/li&gt;
  &lt;li&gt;Runtime：运行时文件（Cache、Data、Logs等）&lt;/li&gt;
  &lt;li&gt;Tpl：模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;运行流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;加载thinkphp.php&lt;/li&gt;
  &lt;li&gt;加载核心文件（&lt;code class=&quot;highlighter-rouge&quot;&gt;./thinkHP/LBI/core&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;加载项目的文件，分析URL，调用相关控制器（URL：&lt;code class=&quot;highlighter-rouge&quot;&gt;/index.php?m=index&amp;amp;a=index&lt;/code&gt;，对应&lt;code class=&quot;highlighter-rouge&quot;&gt;index.class.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;方法）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;配置文件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;框架的配置文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;/ThinkPHP/Conf/convertion.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;项目的配置文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;/App/Conf/config.php&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;C(&quot;xxx&quot;)&lt;/code&gt;可访问到配置项，注意在index.php处添加&lt;code class=&quot;highlighter-rouge&quot;&gt;define(&#39;APP_DEBUG&#39;, true)&lt;/code&gt;，才能使每次访问都读取配置文件。如果要自定义配置文件，如增加&lt;code class=&quot;highlighter-rouge&quot;&gt;user.php&lt;/code&gt;，需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;中增加&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;LOAD_EXT_CONFIG&#39;=&amp;gt;&#39;user&#39;&lt;/code&gt;，且无论是否在Debug状态，每次访问都会读取它。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;url&quot;&gt;URL模式&lt;/h2&gt;

&lt;p&gt;在config.php里配置，也可用C(‘URL_MODEL’)访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认模式：pathinfo模式。&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php/index/user/id/1.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;普通模式：0：&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php?m=Index&amp;amp;a=user&amp;amp;id=1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;重写模式：2：&lt;code class=&quot;highlighter-rouge&quot;&gt;index/user/id/1.html&lt;/code&gt;（需要在apache中配置）&lt;/li&gt;
  &lt;li&gt;兼容模式：3：&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php?s=/Index/user/id/1.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用U方法可以构造URL，若第四个参数为true，则会直接跳转到构造出的URL：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;U(&#39;模块/方法&#39;, array(&#39;id&#39;=&amp;gt;1), &#39;html&#39;, false, &#39;localhost&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;indexphp&quot;&gt;重写模式下隐藏&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开启mod_rewrite.so&lt;/li&gt;
  &lt;li&gt;在根目录创建&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Ifmodule mod_rewrite.c&amp;gt;
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php/$1[QSA,PT,L]
&amp;lt;/Ifmodule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;url-1&quot;&gt;URL伪静态&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost/muke/Index/user/id/1.html&lt;/code&gt;会正确把&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;识别为&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost/muke/Index/user/id/1.shtml&lt;/code&gt;会把&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;识别为&lt;code class=&quot;highlighter-rouge&quot;&gt;1.shtml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;需要在配置文件设置：&lt;code class=&quot;highlighter-rouge&quot;&gt;URL_HTML_SUFFIX&lt;/code&gt;即可，有多种格式就用&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;隔开。&lt;/li&gt;
  &lt;li&gt;可以让搜索引擎认为这是静态页面，更易被检索到。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;自定义函数库&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Common&lt;/code&gt;里建立&lt;code class=&quot;highlighter-rouge&quot;&gt;Common.php&lt;/code&gt;，在其中定义函数进行使用。&lt;/li&gt;
  &lt;li&gt;ThinkPHP自带的dump()函数比var_dump()更好用，可以格式化输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;建立项目模板&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;基本用法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Tpl&lt;/code&gt;里建立Action名字的文件夹，如&lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt;。在其中以function名字建立html页面，如&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在Action中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display()&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display(&quot;Index/index&quot;)&lt;/code&gt;即可。&lt;/li&gt;
  &lt;li&gt;向模板传参的方式：&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;assign(&quot;变量名&quot;, 变量值);&lt;/code&gt;，assign函数可以在一个语句中连续调用。然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;里直接插入PHP片段即可输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-9&quot;&gt;模板引擎介绍&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ThinkPHP/Lib/Template/ThinkTemplate.class.php&lt;/code&gt;中即是ThinkPHP的模板引擎。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;name&#39;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.sex|default=&#39;man&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;可以在模板中获取值。&lt;/li&gt;
  &lt;li&gt;注意&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;age&#39;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;不能用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;替代。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-10&quot;&gt;模板引擎调用函数和系统参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;name&#39;]|md5|substr=0,5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//相当于$name=substr(md&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$now|date=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Y-m-d H:i:s&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,###}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//使用###表示占位&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//调用系统参数&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.server.http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;volistforeachfor&quot;&gt;循环：volist、foreach、for&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$person = array(
    1 =&amp;gt; array(&#39;name&#39;=&amp;gt;&#39;Jack&#39;, &#39;age&#39;=&amp;gt;18),
    ...
);

&amp;lt;volist name=&#39;person&#39; id=&#39;data&#39; offset=&#39;1&#39; length=&#39;3&#39; empty=&#39;没有数据&#39;&amp;gt;
{$data[&#39;name&#39;]} ------- {$data[&#39;age&#39;]}&amp;lt;br/&amp;gt;
&amp;lt;/volist&amp;gt;

&amp;lt;foreach name=&#39;person&#39; item=&#39;data&#39;&amp;gt;
同上，但是截取方式和volist不同。
&amp;lt;/foreach&amp;gt;

&amp;lt;for start=&#39;1&#39; end=&#39;10&#39; comparison=&#39;elt&#39; name=&#39;k&#39;&amp;gt;
{$k}&amp;lt;br/&amp;gt;
&amp;lt;/for&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;eq    neq     gt      egt     lt      elt     heq     nheq&lt;/li&gt;
  &lt;li&gt;=     !=      &amp;gt;       &amp;gt;=      &amp;lt;       &amp;lt;=      ===     !==&lt;/li&gt;
  &lt;li&gt;for循环的默认comparision是lt。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ifswitch&quot;&gt;判断：if、switch&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;if condition=&quot;$num gt 10&quot;&amp;gt;
num大于10
&amp;lt;elseif condition=&quot;$num lt 10&quot; /&amp;gt; 
num小于10
&amp;lt;else/&amp;gt;
num等于10
&amp;lt;/if&amp;gt;

&amp;lt;switch name=&#39;num&#39;&amp;gt;
    &amp;lt;case value=&#39;1&#39;&amp;gt;1&amp;lt;/case&amp;gt;
    &amp;lt;case value=&#39;2|3|4&#39;&amp;gt;2|3|4&amp;lt;/case&amp;gt;
    &amp;lt;default/&amp;gt;other
&amp;lt;/switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意elseif和else要关闭标签。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;比较&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;比较标签 name=&#39;变量名&#39; value=&#39;比较的值&#39;&amp;gt;
&amp;lt;/比较标签&amp;gt;

&amp;lt;eq name=&#39;num&#39; value=&#39;10&#39;&amp;gt;num = 10 &amp;lt;/eq&amp;gt;
&amp;lt;eq name=&#39;num&#39; value=&#39;10&#39;&amp;gt;num = 10 &amp;lt;else /&amp;gt; num != 10 &amp;lt;/eq&amp;gt;
&amp;lt;compare name=&#39;num&#39; value=&#39;10&#39; type=&#39;eq&#39;&amp;gt; num = 10 &amp;lt;/compare&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-12&quot;&gt;区间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;in&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,2,3&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;else&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/in&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;notin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,2,3&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;else&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/notin&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;between&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,10&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/between&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;notbetween&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,10&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/between&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;range&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,11,12&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;in&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/range&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意：range只能替代in或者notin。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;三元运算符&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$num&amp;gt;11?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;大于11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;不大于11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;php&quot;&gt;原生PHP&lt;/h3&gt;

&lt;p&gt;使用&lt;php&gt;&lt;/php&gt;。&lt;/p&gt;

&lt;h2 id=&quot;thinkphp-1&quot;&gt;ThinkPHP的调试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;程序入口添加：&lt;code class=&quot;highlighter-rouge&quot;&gt;define(&#39;APP_DEBUG&#39;, true);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Conf/debug.php&lt;/code&gt;，这个配置文件中的配置在APP_DEBUG打开时会优先于默认配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.php&lt;/code&gt;中开启页面trace信息：&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;SHOW_PAGE_TRACE&#39; =&amp;gt; true&lt;/code&gt;。常用的调试手段有：&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display();&lt;/code&gt;显示调试信息。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;trace(name,C(&quot;name&quot;))&lt;/code&gt;可以输出到调试界面中。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dump()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;G(&#39;run&#39;)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;echo G(&#39;run&#39;,&#39;end&#39;)&lt;/code&gt;获取此段代码的运行时间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-14&quot;&gt;数据库&lt;/h2&gt;

&lt;h3 id=&quot;section-15&quot;&gt;连接数据库&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;/App/Conf/config.php&lt;/code&gt;中定义：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;DB_TYPE&#39; =&amp;gt; &#39;mysql&#39;,
&#39;DB_HOST&#39; =&amp;gt; &#39;localhost&#39;,
&#39;DB_NAME&#39; =&amp;gt; &#39;muke&#39;,
&#39;DB_USER&#39; =&amp;gt; &#39;root&#39;,
&#39;DB_PWD&#39; =&amp;gt; &#39;root&#39;,
&#39;DB_PORT&#39; =&amp;gt; &#39;3306&#39;,
&#39;DB_PREFIX&#39; =&amp;gt; &#39;mk_&#39;,

//还可以加入其它主从数据库：
&#39;DB_HOST&#39; =&amp;gt; &#39;localhost,localhost2,localhost3&#39;,
//开启主从读写分离
&#39;DB_RW_SEPARATE&#39; =&amp;gt; true,
//多个主数据库服务器（前2个）
&#39;DB_MASTER_NUM&#39; =&amp;gt; &#39;2&#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-16&quot;&gt;实例化模型&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1.实例化基础模型model
$user = new Model(&#39;user&#39;);      //表名、表前缀、数据库连接信息
$user = M(&#39;user&#39;);              //同上，简写版
$data = $user-&amp;gt;select();

//2.实例化用户自定义模型
//---假设在/App/Lib/Model下建立有UserModel.class.php
class UserModel extends Model{
    public function getinfo(){
        ...
    }
}
//---则：
$user = new UserModel();
echo $user-&amp;gt;getinfo();
//或
$user = D(&#39;User&#39;);      //如果找不到用户自定义模型则会与M()相同。
$data=$user-&amp;gt;select();

//3.实例化公共模型（就是继承的思想）
//新建CommonModel.class.php：
class CommonModel extends Model{
    public function strmake($str){
        return md5($str);
    }
}
//然后让2中的Model继承自CommonModel。

//4.实例化空模型
$model = M();
$model-&amp;gt;query($sql);    //select，返回数据数组
$model-&amp;gt;execute($sql);  //update, insert，返回受影响行数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;curd&quot;&gt;CURD操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//add
$data=array(
    &#39;user_name&#39; =&amp;gt; &#39;xxxx&#39;,
    &#39;password&#39;  =&amp;gt; &#39;xxxx&#39;,
);
$datas = array(
    1 =&amp;gt; array(...),
    2 =&amp;gt; array(...),
);
M(&#39;User&#39;)-&amp;gt;add($data);      //返回主键
M(&#39;User&#39;)-&amp;gt;addAll($datas);  //返回第一条的主键，addAll只能用于MySQL，不能用于Oracle
echo M()-&amp;gt;getLastSql();     //返回最后一次SQL语句

//select
$data = M(&#39;User&#39;)-&amp;gt;select();    //调试模式会每次自动执行SHOW columns from `xxx1`。非调试模式会缓存结果到Runtime/Data文件夹。

//1.直接使用字符串进行查找
$data = M(&#39;User&#39;)-&amp;gt;where(&#39;id=1&#39;)-&amp;gt;select();

//2.使用数组方式进行查询
$where[&quot;id&quot;] = 1;
$where[&quot;username&quot;] = &quot;xxx&quot;;
$where[&quot;_logic&quot;] = &quot;or&quot;;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//3.表达式查询：array(&#39;表达式&#39;,&#39;查询条件&#39;);
$where[&quot;id&quot;] = array(&#39;lt&#39;, 3);
$where[&quot;id&quot;] = array(array(&#39;gt&#39;,1), array(&#39;lt&#39;,10));        //区间查询，默认and
$where[&quot;id&quot;] = array(array(&#39;gt&#39;,1), array(&#39;lt&#39;,10), or);
$where[&quot;age&quot;] = array(&#39;between&#39;, &#39;1,8&#39;);
$where[&quot;name&quot;] = array(&#39;like&#39;, &#39;%ming&#39;);
$where[&quot;name&quot;] = array(&#39;like&#39;, array(&#39;%ming&#39;, &#39;xiao%&#39;));
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//4.混合用法
$where[&#39;id&#39;] = array(&#39;gt&#39;,10);
$where[&#39;_string&#39;] = &#39;score &amp;gt; 10&#39;;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//5.统计用法：count, max, min, avg, sum，后四种必须传入参数。
M(&#39;User&#39;) -&amp;gt; count();
M(&#39;User&#39;) -&amp;gt; max(&#39;id&#39;);

//1和4不推荐，易被SQL注入。

//update
$update[&#39;score&#39;] = 60;
$where[&#39;id&#39;] = 1;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;save($update);    //返回受影响行数
//其余用法同select

//delete
M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;delete();         //返回受影响行数
M(&#39;User&#39;)-&amp;gt;delete(2);                       //根据主键删除
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;连贯操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1. order
$data = M(&#39;User&#39;)-&amp;gt;order(&#39;score desc, id asc&#39;)-&amp;gt;select();
//2. field，第二个参数默认false，如果是true，则是&quot;除外&quot;的意思
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;select();
//3. limit(length)、limit(start,length)和page(页码，每页条数=20)
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;limit(5)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;limit(1,5)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;page(1,5)-&amp;gt;select();
//4. group和having
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;score,count(*) as total&#39;)-&amp;gt;having(&#39;score&amp;gt;20&#39;)-&amp;gt;group(&#39;score&#39;)-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-18&quot;&gt;多表查询&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1. table方法：table(array(&#39;表名&#39;=&amp;gt;&#39;别名&#39;))，表名要加前缀。
$data = M()-&amp;gt;table(array(&#39;mk_user&#39; =&amp;gt; &#39;user&#39;, &#39;mk_userinfo&#39; =&amp;gt; &#39;info&#39;) )-&amp;gt;where(&#39;user.id=info.user_id&#39;)-&amp;gt;select();
//2. join方法：支持字符串和数组，默认左关联。字符串的话，可以多个join连接多个表。数组不行。
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;Right join mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;innert join mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(array(&#39;mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;))-&amp;gt;select();
//3. union查询：union(&#39;string/array&#39;, true/false)。若为true，则为unionAll查询，不过滤相同的记录。只能union字段相同的两个表。可以多次使用Union。
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;user_name&#39;)-&amp;gt;union(&#39;select user_name from mk_user2&#39;)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;user_name&#39;)-&amp;gt;union(array(&#39;field&#39;=&amp;gt;&#39;user_name&#39;,&#39;table&#39;=&amp;gt;&#39;mk_user2&#39;))-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-19&quot;&gt;过滤查询&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$data = M(&#39;User&#39;)-&amp;gt;distinct(true)-&amp;gt;field(&#39;score&#39;)-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-20&quot;&gt;命名范围的使用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class UserModel extends CommonModel{
    protected $_scope = array(
        &quot;命名范围的标识名&quot; =&amp;gt; array(
            &quot;属性&quot; =&amp;gt; &quot;值&quot;,    //where limit field order table page having group distinct
        ), 
    );
}

调用：
$user = D(&#39;User);
$data = $user-&amp;gt;scope(&#39;命名范围的标识名&#39;)-&amp;gt;select(); //可以使用多个标识名，用逗号隔开，若有冲突，会取用后面一个。可以在scope后再添加其它限制，但是若存在冲突，还是会取后面一个。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 25 May 2016 23:55:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8ThinkPHP%E6%A1%86%E6%9E%B6-%E7%90%86%E8%AE%BA%E7%AF%87/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8ThinkPHP%E6%A1%86%E6%9E%B6-%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>Mac搭建PHP开发环境</title>
        <description>&lt;p&gt;注：之前做PHP的项目都是在Windows使用XAMPP一站式搞定Apache + MySQL + PHP的环境问题，这次我想要在OS X上用PHP实现下之前提到的秒杀系统，首先就需要体验一下在Unix/Linux环境中配置环境的过程。虽然任务不艰难但还是有些地方困扰到了我的，所以做一篇总结。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;方案选择&lt;/h2&gt;

&lt;p&gt;在Mac上搭建相关开发环境的方式网上有太多了，我总结了下，按照配置过程由简单到复杂、配置灵活性由小到大的顺序大致可以总结为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用系统自带Apache和PHP。Mac OS X已经整合了这两个，自然是最简单的，好像只要在httpd.conf里启用php相关的模块就可以直接使用了。但是系统里并没有整合MySQL。并且，看知乎上大家说会有一些问题，比如系统升级丢失模块配置等等。简单玩了玩就放弃了这种方案。&lt;/li&gt;
  &lt;li&gt;使用Xampp等GUI整合安装包。这个和Windows完全一样的感觉，没意思，用Unix/Linux就是要用CLI嘛。&lt;/li&gt;
  &lt;li&gt;使用Homebrew等包管理工具进行安装。这是我最后采用的方法。配置复杂度和灵活性都介于上下两种方案之间。&lt;/li&gt;
  &lt;li&gt;直接下载、编译和使用源码包。虽说这是使用开源软件最通用的方式，但是对于Apache这种感觉很牛的软件，这一次我不想太关注细节，万一出现编译错误或者一些不懂的细枝末节就有些浪费时间了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在开始吧~&lt;/p&gt;

&lt;h2 id=&quot;homebrew&quot;&gt;Homebrew的基本使用&lt;/h2&gt;

&lt;p&gt;Homebrew在Mac平台上也算是鼎鼎大名的软件了，自己老早就安装并且研究过。把常用的命令整理如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update                               //更新源
brew search  xxx                          //搜索包
brew install xxx                          //安装包
brew list                                 //已安装列表
brew uninstall xxx                        //卸载包
brew upgrade xxx                          //升级包
brew tap xxx                              //添加仓库
brew services list                        //已安装brew服务的状态
brew services start/stop/restart httpd24  //启动、停止、重启Apache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;apache&quot;&gt;Apache的安装&lt;/h2&gt;

&lt;p&gt;Apache并没有在homebrew的默认仓库中，要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap homebrew/apache&lt;/code&gt;来添加相应的仓库，或者直接运行以下命令进行安装，这里选择的是2.4版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install homebrew/apache/httpd24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据Homebrew的规则，默认安装到&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;目录下。二进制文件、配置文件、日志文件等都存放在其下的各子目录中。&lt;/p&gt;

&lt;h2 id=&quot;apache-1&quot;&gt;Apache的配置和虚拟主机&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;修改监听端口。&lt;/strong&gt;Apache默认监听8080端口，通过修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/apache2/2.4/httpd.conf&lt;/code&gt;中的下面一行更改至80端口。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  Listen 80
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;配置虚拟主机。&lt;/strong&gt;可以发现，默认服务器根目录是在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/www/htdocs&lt;/code&gt;目录下。我习惯将自己放在Github上的源代码全放在自己的Home下，又不想更改这个默认配置。所以我选择配置开启虚拟主机模块。取消掉这一行的注释即可：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  Include /usr/local/etc/apache2/2.4/extra/httpd-vhosts.conf
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;然后编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;httpd-vhosts.conf&lt;/code&gt;这个文件：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
ServerAdmin ifanze-local@outlook.com
DocumentRoot &quot;/Users/Fanze/Github/SeckillPHP&quot;
ServerName seckillphp.ifanze-local.cn
ErrorLog &quot;/usr/local/var/log/apache2/seckillphp.ifanze-local.cn-error_log&quot;
CustomLog &quot;/usr/local/var/log/apache2/seckillphp.ifanze-local.cn-access_log&quot; common
&amp;lt;Directory &quot;/Users/Fanze/Github/SeckillPHP/&quot;&amp;gt;
Options FollowSymLinks Indexes MultiViews
AllowOverride None
Require all granted
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;几点说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这里我使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;seckillphp.ifanze-local.cn&lt;/code&gt;作为ServerName，所以要修改host文件，要将它指向&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要Directory一段，无论是写在这个文件里还是在httpd.conf里。否则会遇到没权限访问的问题。其中的含义网上很容易找到，但需要注意，apache 2.4不同于旧版，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Require all granted&lt;/code&gt;替代了之前要写的&lt;code class=&quot;highlighter-rouge&quot;&gt;Order deny,allow&lt;/code&gt;等配置访问权限。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;控制Apache服务的开关。&lt;/strong&gt;注意到使用&lt;code class=&quot;highlighter-rouge&quot;&gt;which apachectl&lt;/code&gt;可以查看到apachectl已经从系统自带的apache路径自动改到了我们刚刚安装apache的路径下，所以可以直接使用以下命令控制apache开关：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo apachectl start
  sudo apachectl stop
 &lt;/code&gt;
 此外，同样自动为我们做好的还包括使用brew services：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo brew services start httpd24
  sudo brew services stop httpd24
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;效果是相同的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP的安装&lt;/h2&gt;

&lt;p&gt;之前在Windows上使用的PHP版本是5.5或者5.6，取决于要连接的Oracle数据库是11g还是12c。截止到今天（2016年5月24日），PHP7已经正式发布并且最新版本已经到7.0.6了。看慕课网上的视频了解到PHP7主要的改进包括&lt;strong&gt;性能提升&lt;/strong&gt;和&lt;strong&gt;变量类型&lt;/strong&gt;。（艾玛这还是我认识的那个声明变量从来不用声明类型的PHP吗？）既然这次是自己自发进行的一次练习，就果断选择最新的版本用上吧！&lt;/p&gt;

&lt;p&gt;和apache一样，php也不在默认仓库中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install homebrew/php/php70
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装路径也默认和apache相似，不过安装完成后，如果直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt;php -v&lt;/code&gt;会发现还是系统自带的php。&lt;/p&gt;

&lt;h2 id=&quot;apachephp&quot;&gt;Apache配置PHP模块&lt;/h2&gt;

&lt;p&gt;PHP的安装路径下包括了供apache使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;libphp7.so&lt;/code&gt;模块。只需要配置httpd.conf文件，新增配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoadModule php7_module /usr/local/Cellar/php70/7.0.6/libexec/apache2/libphp7.so

&amp;lt;FilesMatch .php$&amp;gt;
    SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，FilesMatch部分也能够顾名思义。还有一处设置默认文档的地方也要增加一项&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;IfModule dir_module&amp;gt;
    DirectoryIndex index.html index.php
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启Apache。&lt;/p&gt;

&lt;h2 id=&quot;apachephp-1&quot;&gt;测试Apache+PHP&lt;/h2&gt;

&lt;p&gt;在虚拟主机的根目录下建立&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;，输出&lt;code class=&quot;highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt;，浏览器中打开Hostname就能看到预示着配置成功的页面了~&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;安装MySQL&lt;/h2&gt;

&lt;p&gt;安装SQL走了一些弯路，刚开始也想用Homebrew来安装，但是安装完成后无法找到默认的Root密码（5.9之前的版本是没有密码的。），官方的文档上这一块也没有较明确的说明，只是推荐下载dwg包进行安装。所以最后就是用的这个方法，下载安装都很快。并且将MySQL的开关集成在了系统偏好设置里。可能因为我用各种方法装了删、删了又装好多次，最后一遍安装完毕后重启了下电脑才正常启动MySQL服务的。&lt;/p&gt;

&lt;p&gt;默认密码在安装完成后会弹窗提示，也会保留在OS X的通知栏里，建议截图保存并及时修改。&lt;/p&gt;

&lt;p&gt;这里记录一下卸载MySQL的步骤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
sudo vim /etc/hostconfig and removed the line MYSQLCOM=-YES-
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mysql-1&quot;&gt;配置MySQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/mysql/bin&lt;/code&gt;添加到环境变量PATH。我使用zsh，所以修改&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改root用户的默认密码。执行下面命令即可，先输入旧密码，再输入两遍新密码。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqladmin -u root -p password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;登录mysql。执行下面的命令，输入新密码，成功就表示MySQL配置成功：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以使用Navicat Premium等软件对数据库进行管理了。以后有空的时候再装个phpmyadmin吧。&lt;/p&gt;

&lt;h2 id=&quot;php-1&quot;&gt;配置PHP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PHP的配置文件在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/php/7.0&lt;/code&gt;目录下，从默认配置拷贝一份：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /etc/php.ini.default /etc/php.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;至于PHP连接mysql的方式（mysql、mysqli、pdo），就根据需求来吧。在&lt;code class=&quot;highlighter-rouge&quot;&gt;php.ini&lt;/code&gt;中开启相应的模块就行。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 May 2016 18:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/Mac%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/Mac%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        
        <category>Mac</category>
        
        <category>Apache</category>
        
        <category>MySQL</category>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（三）：Web层</title>
        <description>&lt;p&gt;注：续前文。本篇主要是Web层的开发，主要是使用Bootstrap进行页面的简单布置和用Javascript书写前端的交互逻辑。其中有很多细节值得我学习，比如Javascript代码的模块化。&lt;/p&gt;

&lt;p&gt;看完这部视频后更加觉得，这个项目必须要自己做一遍。我打算趁着这几天比较闲，按照视频中的思路，将这个秒杀系统用PHP实现出来，因为自己太久没有用PHP写项目了，借此也可以学一些PHP中的MVC等框架，就像视频中使用的Java的SpringMVC那样。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main
--resources
    --mapper
        SeckillDao.xml
        SuccessKilledDao.xml
    --spring
        spring-dao.xml
        spring-service.xml
        spring-web.xml
    mybatis-config.xml
--webapp
    --resources
    --WEB-INF
        web.xml
    index.jsp
--java
    --org.seckill
        --dao
        --entity
        --service
            --impl
                SeckillServiceImpl
            SeckillService
        --exception
        --dto           数据传输层
        --enums
            SeckillStateEnum
        --web
            SeckillController
--sql

test
--java
--resources
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;restful&quot;&gt;设计Restful接口&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;前端交互流程设计&lt;/h3&gt;

&lt;h3 id=&quot;restful-1&quot;&gt;学习Restful接口设计&lt;/h3&gt;

&lt;p&gt;兴起于：Ruby on Rails，一种优雅的URI表述方式，是一种资源的状态和状态的转移。&lt;/p&gt;

&lt;p&gt;GET /seckill/list
POST /seckill/{id}/execution
DELETE /seckill/{id}/delete&lt;/p&gt;

&lt;p&gt;GET：查询
POST：添加/修改(非逆等)
PUT：修改
DELETE：删除&lt;/p&gt;

&lt;p&gt;URL设计：/模块/资源/{标示}/集合1/…&lt;/p&gt;

&lt;p&gt;实例：秒杀URL设计：
GET /seckill/list &amp;gt; 秒杀列表
GET /seckill/{id}/detail &amp;gt; 详情页
GET /seckill/time/now &amp;gt; 系统时间
POST /seckill/{id}/exposer &amp;gt; 暴露秒杀
POST /seckill/{id}/{md5}/execution &amp;gt; 执行秒杀&lt;/p&gt;

&lt;h2 id=&quot;springmvcspring&quot;&gt;SpringMVC集合spring&lt;/h2&gt;

&lt;h3 id=&quot;springmvc&quot;&gt;使用SpringMVC理论&lt;/h3&gt;

&lt;p&gt;围绕Handler开发：Handler产出Model和View。&lt;/p&gt;

&lt;h4 id=&quot;sprintmvc&quot;&gt;SprintMVC运行流程&lt;/h4&gt;

&lt;h4 id=&quot;http&quot;&gt;HTTP请求地址映射原理&lt;/h4&gt;

&lt;p&gt;使用注解：@RequestMapping。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;请求方法细节处理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;请求参数绑定&lt;/li&gt;
  &lt;li&gt;请求方式限制&lt;/li&gt;
  &lt;li&gt;请求转发和重定向&lt;/li&gt;
  &lt;li&gt;数据模型赋值&lt;/li&gt;
  &lt;li&gt;返回Json数据&lt;/li&gt;
  &lt;li&gt;cookie访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003766491.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;springmvc-1&quot;&gt;整合配置SpringMVC框架&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;配置DispatcherServlet：配置SpringMVC需要加载的配置文件：spring-dao.xml、spring-service.xml、spring-web.xml。&lt;/li&gt;
  &lt;li&gt;配置spring-web.xml：配置SpringMVC：
    &lt;ul&gt;
      &lt;li&gt;开启SpringMVC注解模式。（简化配置：自动注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter；提供一系列功能：数据绑定、数字和日期的转换@NumberFormat、@DateTimeFormat，xml和json默认读写支持。）&lt;/li&gt;
      &lt;li&gt;静态资源默认servlet配置（加入对静态资源的处理：js/git/png…，允许使用”/”做整体映射）&lt;/li&gt;
      &lt;li&gt;配置jsp显示ViewResolver.&lt;/li&gt;
      &lt;li&gt;扫描web相关的bean。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;restful-2&quot;&gt;实现Restful接口&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新建SeckillController。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//类似于@Service @Component，目的是放入spring容器&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/seckill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//url:/模块/资源/{id}/细分  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取列表页&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSeckillList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//list.jsp + model = ModelAndView&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// /WEB-INF/jsp/&quot;list&quot;.jsp&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;seckillId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:/seckill/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sekill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;forward:/seckill/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;seckill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//ajax json&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/exposer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponsBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exportSeckillUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//给result赋值，使用try catch&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/{md5}/execution&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponsBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(.....){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里参数killPhone使用cookie&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/time/now&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;创建class SeckillResult&lt;t&gt;，包括boolean success、T data、String error，用于封装json结果，返回ajax结果。&lt;/t&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bootstrap&quot;&gt;基于bootstrap开发页面结构&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;WEB-INFO/jsp下建立页面：detail.jsp、list.jsp。建立文件夹common放置公共的head.jsp，包括所有的&lt;link /&gt;标签。&lt;/li&gt;
  &lt;li&gt;尽量使用CDN托管js库！！！&lt;/li&gt;
  &lt;li&gt;使用了JQuery cookie和JQuery countDown插件。&lt;/li&gt;
  &lt;li&gt;要用&lt;script&gt;&lt;/script&gt;，而不是&lt;script&gt;&lt;/script&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cookie&quot;&gt;Cookie登录交互、计时交互、秒杀交互&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;javascript做到模块化，模拟包：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seckill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//封装秒杀相关ajax的url&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/seckill/time/now&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//验证手机号&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;validatePhone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//时间判断，为了减少detail代码和代码复用。&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nowTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取秒杀地址，控制显示逻辑，执行秒杀&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;handleSeckillKill&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//详情页秒杀逻辑&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//详情页初始化&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//手机验证和登录，计时交互&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//规范我们的交互流程：params包括seckillId、startTime、endTime&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//在cookie中查找手机号（因为这里没有用到相关登录的后端，使用cookie替代）&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//验证手机，提出一个独立的方法validatePhone&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;//已经登录&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//计时交互&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;success&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;//时间判断&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(....);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;web&quot;&gt;web层课程总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;技术回顾：前端交互设计过程、Restful接口设计、SpringMVC使用技巧、Bootstrap和JS的使用&lt;/li&gt;
  &lt;li&gt;前端交互设计（前端、产品、后端）：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003907843.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringMVC：配置和运行流程、DTO传递数据、注解映射驱动。&lt;/li&gt;
  &lt;li&gt;SpringMVC运行流程：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003986865.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 19:00:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%89-Web%E5%B1%82/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%89-Web%E5%B1%82/</guid>
        
        <category>Java</category>
        
        <category>Web前端</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>【慕课网】数据库设计那些事</title>
        <description>&lt;p&gt;注：这是看了慕课网上一个视频的笔记。是比较基础的数据库相关的知识，比如范式，并且还对数据库设计时需要注意的问题和一些经验性的内容做了分享。原视频链接：&lt;a href=&quot;http://www.imooc.com/learn/117&quot;&gt;http://www.imooc.com/learn/117&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;为什么要进行数据库设计&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;减少数据冗余&lt;/li&gt;
  &lt;li&gt;避免数据维护异常&lt;/li&gt;
  &lt;li&gt;节约存储空间&lt;/li&gt;
  &lt;li&gt;高效访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;数据库设计步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;需求分析：数据是什么、有哪些属性、数据和属性有哪些特点&lt;/li&gt;
  &lt;li&gt;逻辑设计：用ER图逻辑建模&lt;/li&gt;
  &lt;li&gt;物理设计：根据数据库自身的特点&lt;/li&gt;
  &lt;li&gt;维护优化：新的需求进行建表、索引优化、大表拆分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;需求分析&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;了解系统中所要存储的数据&lt;/li&gt;
  &lt;li&gt;了解数据的存储特点（时效性：过期清理；日志：不适合放在数据库中，或者注意定制清理规则。分库分表？归档？）&lt;/li&gt;
  &lt;li&gt;了解数据的生命周期&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;搞清楚一些问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实体及实体间的关系（1对1，1对多，多对多）&lt;/li&gt;
  &lt;li&gt;实体的属性有什么？&lt;/li&gt;
  &lt;li&gt;唯一标识实体的属性或属性组合？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;举例：电商网站&lt;/h3&gt;

&lt;p&gt;用户模块、商品模块、订单模块、购物车模块、供应商模块&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;用户模块&lt;/h4&gt;

&lt;p&gt;用户名、密码、电话、邮箱、身份证号、地址、姓名、昵称……&lt;/p&gt;

&lt;p&gt;存储特点：组件增加，要永久存储&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;商品模块&lt;/h4&gt;

&lt;p&gt;商品编码、商品名称、描述、品类、供应商名称、重量、有效期、价格……&lt;/p&gt;

&lt;p&gt;存储特点：对于下线商品可以归档存储&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;订单模块&lt;/h4&gt;

&lt;p&gt;订单号、用户姓名、电话、收货地址、商品编号、商品名称、数量、价格、订单状态、订单类型……&lt;/p&gt;

&lt;p&gt;存储特点：永久存储（分表、分库存储）&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;购物车模块&lt;/h4&gt;

&lt;p&gt;存储特点：不用永久存储（设置归档、清理规则）&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;供应商模块&lt;/h4&gt;

&lt;p&gt;存储特点：永久存储&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639346317272.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;逻辑设计&lt;/h2&gt;

&lt;h3 id=&quot;section-12&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;将需求转化为数据库的逻辑模型&lt;/li&gt;
  &lt;li&gt;用ER图进行展示&lt;/li&gt;
  &lt;li&gt;与所选用的具体DBMS无关&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;名词&lt;/h3&gt;

&lt;p&gt;关系、元组、属性、候选码、主码、域、分量&lt;/p&gt;

&lt;h3 id=&quot;er&quot;&gt;ER图例&lt;/h3&gt;

&lt;p&gt;实体、联系、属性、连接线&lt;/p&gt;

&lt;h3 id=&quot;nf&quot;&gt;设计范式（NF）&lt;/h3&gt;

&lt;p&gt;第一范式、第二范式、第三范式及BC范式，另还有第四、第五范式。&lt;/p&gt;

&lt;h4 id=&quot;section-14&quot;&gt;操作异常&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;插入异常&lt;/li&gt;
  &lt;li&gt;更新异常&lt;/li&gt;
  &lt;li&gt;删除异常&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-15&quot;&gt;数据冗余&lt;/h4&gt;

&lt;p&gt;相同的数据在多个地方存在，或者某个列由其它列计算得到。&lt;/p&gt;

&lt;h4 id=&quot;section-16&quot;&gt;第一范式&lt;/h4&gt;

&lt;p&gt;定义：数据库表中的所有字段都是单一属性，不可再分的。即表都是二维表。&lt;/p&gt;

&lt;p&gt;单一属性是由基本的数据类型所构成。&lt;/p&gt;

&lt;h4 id=&quot;section-17&quot;&gt;第二范式&lt;/h4&gt;

&lt;p&gt;定义：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖。&lt;/p&gt;

&lt;p&gt;部分函数依赖：存在组合关键字中的某一关键字决定非关键字的情况。&lt;/p&gt;

&lt;p&gt;所有单关键字段的表都符合第二范式。&lt;/p&gt;

&lt;p&gt;不符合第二范式的例子：
&lt;img src=&quot;/images/posts/14639346577960.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为存在部分函数依赖：
(商品名称) -&amp;gt; (价格，描述，重量，有效期)
(供应商名称) -&amp;gt; (供应商电话)&lt;/p&gt;

&lt;p&gt;存在的问题：插入异常、删除异常、更新异常、数据冗余。&lt;/p&gt;

&lt;p&gt;解决方式：
&lt;img src=&quot;/images/posts/14639346749155.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-18&quot;&gt;第三范式&lt;/h4&gt;

&lt;p&gt;定义：如果数据表中不存在非关键字段，对任意候选关键字段的传递函数依赖，则符合第三范式。&lt;/p&gt;

&lt;p&gt;实例：
&lt;img src=&quot;/images/posts/14639346844892.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(商品名称) -&amp;gt; (分类) -&amp;gt; (分类描述)&lt;/p&gt;

&lt;p&gt;存在问题：数据冗余、插入异常、更新异常、删除异常。&lt;/p&gt;

&lt;p&gt;解决：
&lt;img src=&quot;/images/posts/14639346929465.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;bc&quot;&gt;BC范式&lt;/h4&gt;

&lt;p&gt;定义：Boyce.Codd范式，数据库表中如果不存在任何字段对任一候选关键字段的传递函数依赖则符合BCNF。&lt;/p&gt;

&lt;p&gt;实例：
&lt;img src=&quot;/images/posts/14639347213896.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假定：供应商:供应商联系人 = 1:多，供应商:商品 = 1:多&lt;/p&gt;

&lt;p&gt;(供应商，商品ID) -&amp;gt; (联系人，商品数量)
(联系人，商品ID) -&amp;gt;（供应商，商品数量）&lt;/p&gt;

&lt;p&gt;存在：&lt;/p&gt;

&lt;p&gt;(供应商) -&amp;gt; (供应商联系人)
(供应商联系人) -&amp;gt; (供应商)&lt;/p&gt;

&lt;p&gt;所以不符合BCNF。&lt;/p&gt;

&lt;p&gt;解决：
&lt;img src=&quot;/images/posts/14639347354230.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;此处存疑，知乎上的讨论更好一些：&lt;a href=&quot;https://www.zhihu.com/question/24696366&quot;&gt;https://www.zhihu.com/question/24696366&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-19&quot;&gt;物理设计&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;选择合适的DBMS&lt;/li&gt;
  &lt;li&gt;定义数据库、表、字段的命名规范&lt;/li&gt;
  &lt;li&gt;选择合适的字段类型&lt;/li&gt;
  &lt;li&gt;反范式化设计（用空间换取时间）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dbms&quot;&gt;常见DBMS系统&lt;/h3&gt;

&lt;p&gt;商业数据库：Oracle、SQLServer（企业级项目）
开源数据库：MySQL、PgSQL（互联网项目）&lt;/p&gt;

&lt;p&gt;对事务操作要求较高：Oracle&lt;/p&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL常用数据引擎&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639347733735.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;表和字段命名规则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可读性原则&lt;/li&gt;
  &lt;li&gt;表意性原则&lt;/li&gt;
  &lt;li&gt;长名原则&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-21&quot;&gt;字段类型选择原则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;数字类型 &amp;gt; 日期/二进制 &amp;gt; 字符类型（优先空间小的类型）&lt;/li&gt;
  &lt;li&gt;如：birthday: Int &amp;gt; Datetime &amp;gt; Char(10) &amp;gt; varchar(20)&lt;/li&gt;
  &lt;li&gt;MySQL的TIMESTAMP只能存到2037年&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639347821112.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从两个角度考虑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;进行数据比较操作时（查询、Join、排序等）：字符处理比数字慢&lt;/li&gt;
  &lt;li&gt;数据处理以页为单位，列长度越小，利于性能提升&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;char与varchar：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;若列中存储的数据长度差不多是一致的，用char&lt;/li&gt;
  &lt;li&gt;最大数据长度小于50字节，也考虑用char&lt;/li&gt;
  &lt;li&gt;不宜定义大于50字节的char类型&lt;/li&gt;
  &lt;li&gt;注意UTF8每个汉字占3个字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;decimal与float：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;decimal存储精确数据&lt;/li&gt;
  &lt;li&gt;float存储空间开销更小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;时间类型如何存储&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用int：长度比datetime小，使用不方便，要转换，只能存到2038-1-19 11:14:07&lt;/li&gt;
  &lt;li&gt;根据需要存储的时间粒度选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-22&quot;&gt;其它&lt;/h3&gt;

&lt;h4 id=&quot;section-23&quot;&gt;如何选择主键&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;区分业务主键和数据库主键，前者用于标识，后者是为了优化数据存储&lt;/li&gt;
  &lt;li&gt;考虑是否要顺序增长&lt;/li&gt;
  &lt;li&gt;主键所占空间要尽可能小（使用聚集索引的表，每个索引后会附加主键信息）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-24&quot;&gt;避免使用外键约束&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;降低数据导入效率&lt;/li&gt;
  &lt;li&gt;增加维护成本&lt;/li&gt;
  &lt;li&gt;虽不建议，但相关联的列上一定要建立索引&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-25&quot;&gt;避免使用触发器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;降低数据导入的效率&lt;/li&gt;
  &lt;li&gt;可能会出现意想不到的数据异常&lt;/li&gt;
  &lt;li&gt;使业务逻辑变复杂&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-26&quot;&gt;预留字段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;无法准确知道预留字段的类型&lt;/li&gt;
  &lt;li&gt;无法准确知道预留字段的内容&lt;/li&gt;
  &lt;li&gt;后期维护预留字段的成本同增加一个字段的成本相同&lt;/li&gt;
  &lt;li&gt;严禁使用预留字段！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-27&quot;&gt;反范式化表设计&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用空间换时间&lt;/li&gt;
  &lt;li&gt;对第三范式进行违反&lt;/li&gt;
  &lt;li&gt;一定要适度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-28&quot;&gt;维护和优化&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;维护数据字典&lt;/li&gt;
  &lt;li&gt;维护索引&lt;/li&gt;
  &lt;li&gt;维护表结构&lt;/li&gt;
  &lt;li&gt;在适当的时候对表进行水平拆分或垂直拆分&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-29&quot;&gt;维护数据字典&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用第三方工具&lt;/li&gt;
  &lt;li&gt;使用备注字段，可以用select语句导出&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-30&quot;&gt;维护索引&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;出现在Where、group by、order by从句中的列&lt;/li&gt;
  &lt;li&gt;可选择性高的列要放到索引的前面&lt;/li&gt;
  &lt;li&gt;索引中不要包括太长的数据类型&lt;/li&gt;
  &lt;li&gt;并不是越多越好，过多的索引对读写都不好&lt;/li&gt;
  &lt;li&gt;定期维护索引碎片&lt;/li&gt;
  &lt;li&gt;在SQL语句中不要使用强制索引关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-31&quot;&gt;维护表结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用在线变更表结构的工具&lt;/li&gt;
  &lt;li&gt;同时对数据字典进行维护&lt;/li&gt;
  &lt;li&gt;控制表的宽度和大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-32&quot;&gt;数据库中适合的操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;批量操作比逐条操作好&lt;/li&gt;
  &lt;li&gt;禁止使用select *&lt;/li&gt;
  &lt;li&gt;控制使用自定义函数&lt;/li&gt;
  &lt;li&gt;不要使用全文索引&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-33&quot;&gt;表的拆分&lt;/h3&gt;

&lt;h4 id=&quot;section-34&quot;&gt;垂直拆分：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;经常一起查询的列放一起&lt;/li&gt;
  &lt;li&gt;text,blob等大字段拆分到附加表中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-35&quot;&gt;水平拆分：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;为了控制表的大小。&lt;/li&gt;
  &lt;li&gt;常用方式：主键Hash&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 22 May 2016 23:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>数据库</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（二）：Service层</title>
        <description>&lt;p&gt;注：续前文。&lt;/p&gt;

&lt;p&gt;DAO层不写逻辑代码，主要内容：接口设计 + SQL编写。代码和SQL分离，方便Review。&lt;/p&gt;

&lt;p&gt;DAO拼接等逻辑在Service层完成。&lt;/p&gt;

&lt;h2 id=&quot;service&quot;&gt;Service接口设计&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main
--resources
    --mapper
        SeckillDao.xml
        SuccessKilledDao.xml
    --spring
        spring-dao.xml
        spring-service.xml
    mybatis-config.xml
--webapp
--java
    --org.seckill
        --dao
        --entity
        --service
            --impl
                SeckillServiceImpl
            SeckillService
        --exception
        --dto           数据传输层
        --enums
            SeckillStateEnum
--sql

test
--java
--resources
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;设计业务接口：要站在“使用者”角度设计接口，而不是实现。包括三个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法定义粒度&lt;/li&gt;
  &lt;li&gt;参数&lt;/li&gt;
  &lt;li&gt;返回类型（return 类型/异常）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;编码：&lt;/h3&gt;

&lt;p&gt;DTO：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//是否开启秒杀&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SuccessKilled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successKilled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Exception:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 重复秒杀异常（运行期异常）&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RepeatKillException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 秒杀关闭异常&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillCloseException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 秒杀相关业务异常（通用异常）&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//IDE自动生成&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckilService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSeckillList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exportSeckillUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SeckillExecution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executeSeckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RepeatKillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillCloseException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实现Service：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SuccessKilledDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successKilledDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rgafghasdjfas;dfjads;fj&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//盐值，混淆MD5。&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSeckillList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exportSeckillUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//拿到Seckill对象&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//比较nowTime是否在startTime和endTime之间。返回相应的 new Exposer()。&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 多看看这个函数的实现，很有用！！(放在本文的最后了。)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SeckillExecution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executeSeckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RepeatKillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillCloseException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//判断md5是否存在和是否被篡改&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//执行秒杀逻辑：减库存、记录购买行为。抛出异常或者返回new SeckillExecution()。注意这里的try...catch和throw异常的使用。&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以把状态（数据字典）封装成枚举：SeckillStatEnum，尽量遵循枚举的开发规范。&lt;/p&gt;

&lt;h2 id=&quot;springservice&quot;&gt;使用Spring托管Service依赖理论&lt;/h2&gt;

&lt;p&gt;Spring IOC：依赖注入。对对象工厂和依赖管理可以获得一致的访问接口。&lt;/p&gt;

&lt;p&gt;业务对象依赖图：
&lt;img src=&quot;/images/posts/14638488325375.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么用IOC：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象创建统一管理&lt;/li&gt;
  &lt;li&gt;规范的生命周期管理&lt;/li&gt;
  &lt;li&gt;灵活的依赖注入&lt;/li&gt;
  &lt;li&gt;一致的获取对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring IOC注入方式和场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML：来自第三方类库，需要命名空间配置&lt;/li&gt;
  &lt;li&gt;注解：项目中自身开发使用的类，如@Service、@Controller&lt;/li&gt;
  &lt;li&gt;Java配置类：通过代码控制对象创建逻辑，如自定义修改依赖类库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本项目IOC使用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML配置&lt;/li&gt;
  &lt;li&gt;package-scan（包扫描）&lt;/li&gt;
  &lt;li&gt;Annotation注解&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;编码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;创建spring-service.xml：扫描service包下所有使用注解的类型&lt;/li&gt;
  &lt;li&gt;对SeckillServiceImpl使用@Service注解，注入Service依赖（对成员变量使用@Autowired）。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;扩展：@Component、@Service、@Dao、@Controller。@Autowired、@Resource、@Inject。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spring&quot;&gt;使用Spring声明式事务理论&lt;/h3&gt;

&lt;p&gt;声明式事务：解脱事务代码，交给第三方框架。&lt;/p&gt;

&lt;p&gt;使用方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;早期：ProxyFactoryBean + XML。&lt;/li&gt;
  &lt;li&gt;tx:advice + aop命名空间：一次配置永久生效。（使用较多）&lt;/li&gt;
  &lt;li&gt;注解@Transactional：注解控制。（更推荐）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用注解控制事务方法的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开发团队达成一致约定，明确标注事务方法的编程风格&lt;/li&gt;
  &lt;li&gt;保证事务方法的执行时间尽可能短，不要穿插其它网络操作（RPC/HTTP请求）或者剥离到事务方法外部。&lt;/li&gt;
  &lt;li&gt;不是所有的方法都需要事务，如只有一条修改操作，只读操作不需要事务控制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事务方法嵌套：声明式事务独有的概念，当有新的事务到来时：propagation_required等。&lt;/p&gt;

&lt;p&gt;什么时候回滚事务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抛出运行期异常（RuntimeException）&lt;/li&gt;
  &lt;li&gt;要小心不当的try-catch。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置事务管理器（jdbc）：注入数据库连接池&lt;/li&gt;
  &lt;li&gt;配置基于注解的声明式事务，默认使用注解来管理事务行为&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;service-1&quot;&gt;使用集成测试Service逻辑&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用Logback记录日志。&lt;/li&gt;
  &lt;li&gt;注意异常情况的处理。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 21 May 2016 23:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%BA%8C-Service%E5%B1%82/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%BA%8C-Service%E5%B1%82/</guid>
        
        <category>Java</category>
        
        <category>Web后台</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（一）：业务分析与DAO层</title>
        <description>&lt;p&gt;注：这是我在看完慕课网上的视频后记的笔记，从零开始介绍了如何开发一个高并发的商品秒杀网站。&lt;/p&gt;

&lt;p&gt;我觉得这是我在慕课网上看得最有价值的视频之一了，从中可以学习到很多项目构建的思路和编码技巧。唯一遗憾的是，这是用Java写的，而我没有用Java写过网站，所以对其中的很多Java依赖库丝毫不了解。不过没有关系，语言只是工具，思想都是相通的。把它放在PHP或者ASP.Net上一定会有类似的框架和方案可以实现同样的功能。也正因如此，若直接看我的这篇博客，可能什么都学不到。这篇博客是为我日后回顾做记录的。想学习相关的内容还是从看慕课网上yijun zhang老师的视频开始吧。&lt;/p&gt;

&lt;p&gt;传送门：&lt;a href=&quot;http://www.imooc.com/u/2145618/courses?sort=publish&quot;&gt;http://www.imooc.com/u/2145618/courses?sort=publish&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;课程介绍&lt;/h2&gt;

&lt;p&gt;基于SpringMVC + Spring + MyBatis。&lt;/p&gt;

&lt;p&gt;秒杀业务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;具有典型“事务”特性&lt;/li&gt;
  &lt;li&gt;秒杀/红包类应用越来越多&lt;/li&gt;
  &lt;li&gt;面试常问&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;相关技术介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL：表设计、SQL技巧、事务和行级锁&lt;/li&gt;
  &lt;li&gt;MyBatis：DAO层设计与开发、合理使用MyBatis、与Spring的整合&lt;/li&gt;
  &lt;li&gt;Spring：Spring IOC整合Service、声明式事务运用&lt;/li&gt;
  &lt;li&gt;SpringMVC：Restful接口设计和使用、框架运作流程、Controller开发技巧&lt;/li&gt;
  &lt;li&gt;前端：交互设计、Bootstrap、JQuery&lt;/li&gt;
  &lt;li&gt;高并发：高并发点和分析、优化思路和实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;创建项目&lt;/h2&gt;

&lt;p&gt;从零开始创建、从官网获取资源、使用Maven创建项目然后导入到IntelliJ IDEA工程。&lt;/p&gt;

&lt;p&gt;注意使用更高的Servlet版本。&lt;/p&gt;

&lt;p&gt;目录：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main
--resources
    --mapper
        SeckillDao.xml
        SuccessKilledDao.xml
    --spring
        spring-dao.xml
    mybatis-config.xml
--webapp
--java
    --org.seckill
        --dao
        --entity
--sql

test
--java
--resources
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;配置依赖：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;junit 4.11&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;日志：java常用：slf4j，log4j，logback，common-logging。
    &lt;ul&gt;
      &lt;li&gt;slf4j(接口) + logback(实现)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数据库相关：
    &lt;ul&gt;
      &lt;li&gt;驱动：mysql-connector-java&lt;/li&gt;
      &lt;li&gt;连接池：c3p0&lt;/li&gt;
      &lt;li&gt;DAO框架：MyBatis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Servlet Web相关依赖
    &lt;ul&gt;
      &lt;li&gt;标签：taglibs&lt;/li&gt;
      &lt;li&gt;默认标签库：jstl&lt;/li&gt;
      &lt;li&gt;jackson&lt;/li&gt;
      &lt;li&gt;javax.servlet-api&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;spring依赖：
    &lt;ul&gt;
      &lt;li&gt;核心依赖：spring-core&lt;/li&gt;
      &lt;li&gt;IOC：spring-beans&lt;/li&gt;
      &lt;li&gt;扩展：spring-context&lt;/li&gt;
      &lt;li&gt;DAO层依赖：spring-jdbc&lt;/li&gt;
      &lt;li&gt;事务相关：spring-tx&lt;/li&gt;
      &lt;li&gt;Spring Web相关依赖：spring-web&lt;/li&gt;
      &lt;li&gt;spring-webmvc&lt;/li&gt;
      &lt;li&gt;spring test相关依赖：spring-test&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;秒杀业务的分析&lt;/h2&gt;

&lt;p&gt;核心：用户和商家对库存的处理。&lt;/p&gt;

&lt;p&gt;用户：减库存、记录购买明细 =&amp;gt; 事务 =&amp;gt; 数据落地（MySQL Vs NoSQL）&lt;/p&gt;

&lt;p&gt;事务机制依然是目前最可靠的数据落地方案。&lt;/p&gt;

&lt;p&gt;难点：“竞争”。MySQL：事务 + 行级锁。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;实现哪些秒杀功能&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;秒杀接口暴露&lt;/li&gt;
  &lt;li&gt;执行秒杀&lt;/li&gt;
  &lt;li&gt;相关查询&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发阶段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DAO设计编码&lt;/li&gt;
  &lt;li&gt;Service设计编码&lt;/li&gt;
  &lt;li&gt;Web设计编码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;编码&lt;/h2&gt;

&lt;h3 id=&quot;section-7&quot;&gt;数据库设计与编码&lt;/h3&gt;

&lt;h4 id=&quot;ddl&quot;&gt;DDL&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;秒杀库存表：&lt;code class=&quot;highlighter-rouge&quot;&gt;seckill(seckill_id, name, number, start_time, end_time, create_time)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL使用InnoDB引擎（支持事务）。
在start_time、end_time、create_time上建立索引。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;秒杀成功明细表：&lt;code class=&quot;highlighter-rouge&quot;&gt;success_killed(seckill_id, user_phone, state, create_time)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用联合主键：seckill_id, user_phone
在create_time上建立索引。
state: -1无效，0成功，1已付款….&lt;/p&gt;

&lt;p&gt;养成手写DDL的习惯。&lt;/p&gt;

&lt;h4 id=&quot;dao&quot;&gt;DAO实体和接口编码&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编写Entity类。（技巧：IDE生成getter/setter/tostring）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;设计DAO接口：实体的CRUD。
    &lt;ul&gt;
      &lt;li&gt;SeckillDao：
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int reduceNumber(long seckillId, Data killTime)&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Seckill queryById(long seckillId)&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Seckill&amp;gt; queryAll(int offset, int limit)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SuccessKilledDao:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int insertSuccessKilled(SuccessKilled successKilled)&lt;/code&gt;（没必要传整个实体，long seckillId, long userPhone即可）&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SuccessKilled queryByIdWithSeckill(long seckillId)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于myBatis（或HiberNate）实现DAO。写mapper，为DAO接口方法提供SQL语句配置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;myBatis整合Spring：
    &lt;ul&gt;
      &lt;li&gt;更少的编码：只写接口，不写实现&lt;/li&gt;
      &lt;li&gt;更少的配置：别名（省去包名）、配置扫描、DAO实现&lt;/li&gt;
      &lt;li&gt;足够的灵活性。（自己定制SQL、自由传参、结果集自动复制）&lt;/li&gt;
    &lt;/ul&gt;

    &lt;ol&gt;
      &lt;li&gt;配置数据库相关参数。&lt;/li&gt;
      &lt;li&gt;数据库连接池c3p0。（连接池属性：数据库连接参数、maxPoolSize、minPoolSize、autoCommitOnClose、checkoutTimeout、acquireRetryAttempts）&lt;/li&gt;
      &lt;li&gt;配置sqlSessionFactory对象：注入数据库连接池、配置MyBatis全局配置文件、扫描entity包并使用别名、扫描sql配置文件(mapper/*.xml)。&lt;/li&gt;
      &lt;li&gt;配置扫描DAO接口包，动态实现DAO接口，注入到spring容器中：注入sqlSessionFactory、给出扫描DAO接口包。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dao-1&quot;&gt;DAO层单元测试和问题排查&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;使用IDE自动生成SeckillDaoTest()方法。&lt;/li&gt;
  &lt;li&gt;配置spring和junit整合，junit启动时加载springIOC容器。告诉junit spring配置文件。&lt;/li&gt;
  &lt;li&gt;注入DAO实现类依赖。（就是声明个成员变量…）&lt;/li&gt;
  &lt;li&gt;编写测试方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;涨姿势：Java没有保存形参的记录，要对形参使用@params注解。&lt;/p&gt;

</description>
        <pubDate>Sat, 21 May 2016 22:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%80-%E4%B8%9A%E5%8A%A1%E5%88%86%E6%9E%90%E4%B8%8EDAO%E5%B1%82/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%80-%E4%B8%9A%E5%8A%A1%E5%88%86%E6%9E%90%E4%B8%8EDAO%E5%B1%82/</guid>
        
        <category>Java</category>
        
        <category>Web后台</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>关于我</title>
        <description>&lt;p&gt;这里是孟凡泽的个人站点（&lt;a href=&quot;http://ifanze.cn&quot;&gt;http://ifanze.cn&lt;/a&gt;），在茫茫互联网的海洋中豪不起眼。如果您是碰巧空降至此，还真是一种缘分呢。&lt;/p&gt;

&lt;p&gt;本博客将记录我今后的学习历程，主要是Web相关的技术。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;经历&lt;/h2&gt;

&lt;p&gt;我出生在一个平凡的小县城，现就读于武汉大学这所美丽的大学。主修GIS，在大学期间做过很多Web开发相关的项目。经过在这里已经近五年的学习和生活，自己渐渐明确了将来在这条职业道路上的发展方向。&lt;/p&gt;

&lt;p&gt;自我感觉，大学里收获最多的是对编程基础的夯实。从C/C++作为入门，到数据结构、数据库、软件工程这些基本课程的学习，再到自己在W3school在线教程学习Web技术相关的基础知识，在慕课网上认识了MVC框架，再在导师所给的工程项目中将这些用于实践。这些经历过程中所收获的，包括基础理论、语言语法、工具使用、查阅文档的能力、代码调试能力、简单的架构和重构能力、团队沟通和合作能力，我想就是构筑将来自己的技能栈所需要的基石吧。&lt;/p&gt;

&lt;p&gt;现在，在这毕业找工作之际，我建立起这篇博客，期待在接下来的日子中，自己能够将琐碎的知识组织起来，并有所输出。我想是大有裨益的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;爱好&lt;/h2&gt;

&lt;p&gt;我喜欢和计算机，手机，以及其它智能设备打交道。追求硬件、软件和互联网产品上更优质和更高效的使用体验。有时会宅在电脑前玩LOL，自诩不坑。也有时拿起相机出去拍拍片，审美不行的我水平特渣，努力提升ing。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;《算法导论》&lt;/li&gt;
  &lt;li&gt;《深入理解计算机系统》&lt;/li&gt;
  &lt;li&gt;《MacTalk·人生元编程》&lt;/li&gt;
  &lt;li&gt;《重构：改善既有代码的设计》&lt;/li&gt;
  &lt;li&gt;《Clean Code Handbook》&lt;/li&gt;
  &lt;li&gt;《程序员面试白皮书》&lt;/li&gt;
  &lt;li&gt;《高效能人士的七个习惯》&lt;/li&gt;
  &lt;li&gt;《快乐的Linux命令行》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;受益于&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/&quot;&gt;廖雪峰的官方网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mifengtd.cn&quot;&gt;褪墨・时间管理，个人提升，生活健康与习惯&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pizida.com/&quot;&gt;痞子达・web学习、移动开发学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cnfeat.com/&quot;&gt;独立写生&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://w3school.com.cn/&quot;&gt;w3shool 在线教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;关注&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ithome.com&quot;&gt;IT之家 - 数码，科技，生活&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zhihu.com&quot;&gt;知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iplaysoft.com&quot;&gt;异次元软件世界 - 软件改变生活！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zealer.com&quot;&gt;ZEALER - 科技生活方式第一站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.appinn.com/&quot;&gt;小众软件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/imooc.com&quot;&gt;慕课网 - 国内最大的IT技能学习平台&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bbs.feng.com&quot;&gt;威锋网论坛 - 千万果粉大本营&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bbs.pcbeta.com&quot;&gt;远景论坛 - 微软极客社区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;加我好友&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/qrcode_1463853322210%E5%89%AF%E6%9C%AC.jpg&quot; alt=&quot;qrcode_1463853322210副本&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 20 May 2016 22:05:40 +0800</pubDate>
        <link>http://iFanze.cn//about/</link>
        <guid isPermaLink="true">http://iFanze.cn//about/</guid>
        
        
        <category>随笔</category>
        
      </item>
    
  </channel>
</rss>
