<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meng Fanze</title>
    <description>求知，思考，高效生活</description>
    <link>http://iFanze.cn//</link>
    <atom:link href="http://iFanze.cn//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 10 Apr 2017 20:33:45 +0800</pubDate>
    <lastBuildDate>Mon, 10 Apr 2017 20:33:45 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>使用vps、shadowsocks、kcptun搭梯子</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;layout: post
title: 使用VPS、Shadowsocks、kcptun搭梯子
author: 孟凡泽
date: 2016-11-20 19:12:40 +0800
tag: 网络
categories: 笔记
—&lt;/p&gt;

&lt;p&gt;从我家院子出来进去挺不方便的，只能用梯子从墙上翻过去。自己也试过很多种梯子了，各种打着VPN标签的也好，PAC标签的也好，免费的或者花钱买来的，他们的质量和爬过墙需要耗费的时间成本总不那么理想。这一次，终于花费了两天的时间自己动手做了个，已经很大程度上符合自己的预期了~&lt;/p&gt;

&lt;p&gt;主要思想：租用国外的VPS，使用Shadowsocks(简称ss)把它搭建成代理服务器，再使用kcptun优化速度。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一、用到的工具&lt;/h2&gt;

&lt;h3 id=&quot;vps&quot;&gt;1.1 VPS&lt;/h3&gt;

&lt;p&gt;国内的云服务厂商，如腾讯云阿里云，海外的节点甚至香港的节点都很贵，不考虑了…（腾讯云对学生1元/月的国内服务器还是很棒的。）&lt;/p&gt;

&lt;p&gt;而国外的，通过各方的推荐，最后选择了&lt;a href=&quot;https://bwh1.net/&quot;&gt;搬瓦工&lt;/a&gt;。实惠、速度快。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14795638920454.jpg&quot; alt=&quot;&quot; /&gt;
我选择的是每月5刀的这款，最方便的是这个网站支持支付宝。这也是唯一需要花钱的地方了，其实3刀每月的估计也够，带宽是一样的，按年付费还会更便宜，只是机器配置和每月流量少一些。这样的开销绝对比直接买各种VPN划得来，并且速度更快、终端数没限制、连接更稳定、流量够用，并且还获得了一台海外的服务器以后可以搭更多你想要的服务。&lt;/p&gt;

&lt;h3 id=&quot;shadowsocks&quot;&gt;1.2 ShadowSocks&lt;/h3&gt;

&lt;p&gt;VPN ≠ 代理，只是大多数人是利用VPN实现代理的功能，VPN其实主要是用在外网访问内网的情景中。具体对比参见：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/25143289&quot;&gt;技术角度分析一下VPN和代理服务器的区别？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;VPN使用的协议有PPTP、L2TP等等，但是给我的感觉是在我们实验室的环境下能够成功连接的几率基本为0。&lt;/p&gt;

&lt;p&gt;而代理的设置往往在很多浏览器、应用软件、甚至是系统控制面板的配置界面里可以看到，有两种常用的：&lt;/p&gt;

&lt;p&gt;第一种：自动代理。需要填写一个PAC文件的地址。这个文件里记录有若干站点的访问规则，这样系统就知道对一个特定的网站要走怎样的代理，或者是不走代理了。这种方式的优点是配置简单，非常轻量级，比如我之前经常在用的这个公共PAC：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pac.itzmx.com/&quot;&gt;PAC全自动代理脚本，免费代理，proxy代理，开源项目官网 - itzmx.com&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是这种公共PAC的缺点是不稳定、慢，现在每次第一次用还需要输入特定的用户名和密码。不过你需要做的其实很简单，直接在系统的网络配置界面或者Chrome的代理切换插件里类似这样配置即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14795765365109.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二种：手动设置代理，所有流量都走代理通道。一般是填写代理服务器的IP和端口，有些还需要用户名和密码。
&lt;img src=&quot;/images/posts/14796206378825.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;常用的代理方式主要包括：HTTP代理、HTTPS代理、SOCKS代理。至于这三者的区别，我的理解是，HTTP代理和HTTPS代理工作在OSI模型的应用层，并且只能各自代理HTTP或HTTPS协议通讯。而SOCKS代理工作在会话层，包括4和5两个版本，后者比前者多了对鉴定、UDP、IPv6等的支持，只是单纯传递数据包，不关心具体协议和用法，所以快很多。更具体的区别可参阅：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;代理服务器 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE&quot;&gt;超文本传输协议 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/SOCKS&quot;&gt;SOCKS - 维基百科，自由的百科全书&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而Shadowsocks，顾名思义，主要使用的是socks协议。而我们的主要任务就是要在租用的VPS上安装SS的服务器端让它能够提供代理服务，之后就是在客户端上填入参数进行配置了（或者使用它提供的客户端，各操作系统都有）。&lt;/p&gt;

&lt;p&gt;遗憾的是，Shadowsocks的作者已经迫于一些压力撤掉了Github上的代码，估计现在只能使用流传的版本？&lt;/p&gt;

&lt;p&gt;不过不用担心，搬瓦工的VPS控制面板上提供了一键安装Shadowsocks Server的功能，真是太方便了…&lt;/p&gt;

&lt;h3 id=&quot;kcptun&quot;&gt;1.3 kcptun&lt;/h3&gt;

&lt;p&gt;完成上述两部分后，再配置下客户端实际上就已经成功了，只是速度还不理想。通过搜索发现这个速度还是有提升的空间的。首先发现的是FinalSpeed和它的高级版TCPSpeed，后者是前者的升级收费版，并且开发者撤下了前者在Github上的代码，不考虑了…&lt;/p&gt;

&lt;p&gt;而kcptun就是很棒的一个开源替代品。使用了KCP协议，看看它的介绍：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;KCP 是一个快速可靠协议，能以比 TCP浪费10%-20%的带宽的代价，换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1428414542776.html&quot;&gt;快速可靠协议：KCP - OPEN 开发经验库&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/xtaci/kcptun&quot;&gt;xtaci/kcptun: A Simple UDP Tunnel Based On KCP&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们需要做的是在客户端与VPS的SS服务器之间分别配置服务器端和客户端，然后让客户端上的kcptun代理流量，就是这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14795785737529.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然整个架构变复杂了一些，但是速度的提升真的很显著，使用后流畅观看Youtube上的1080p视频不是问题。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二、具体流程&lt;/h2&gt;

&lt;h3 id=&quot;vps-1&quot;&gt;2.1 购买和管理VPS&lt;/h3&gt;

&lt;p&gt;这里唯一要注意的就是机房的位置，搬瓦工提供五个位置可选，其中位于美国西部的Los Angeles和Phoenix的机房会快一些。操作系统当然是用CentOS。&lt;/p&gt;

&lt;p&gt;购买完成后即可通过他提供的KiwiVM控制面板进入VPS的管理界面。这里可以查看VPS的配置、资源使用，也有在Web端进行文件管理、密码修改、系统更换的操作，甚至还提供了3种能在Web上直接使用的Shell。如果选择的机房位置不满意，也可以很方便地进行更换，当然这样的话IP会变，但数据都会帮你进行无缝地转移。&lt;/p&gt;

&lt;p&gt;当然最方便地还是用自己电脑上的终端（Windows上可以使用putty、cygwin等）通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;登录，要注意的是SSH端口并不是默认的22，可以在KiwiVM主页上找到。系统还会为你生成默认的root用户密码，这也需要你登录后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt;进行修改的（推荐）。&lt;/p&gt;

&lt;h3 id=&quot;shadowsocks-server&quot;&gt;2.2 安装Shadowsocks Server&lt;/h3&gt;

&lt;p&gt;在KiwiVM控制面板列表的最后一项可以找到，在知道Github上SS源码被撤下后发现它提供一键安装简直不要太方便。安装完成后，SS Server运行的端口、加密方式和密码都会简单直白地告诉你。&lt;/p&gt;

&lt;p&gt;然后下面就已经给出了后续要做的事情了，建议按他的步骤下载相应的客户端进行配置和测试，如果成功，继续下一步进行我们的提速方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796111155315.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kcptun-1&quot;&gt;2.3 kcptun的使用&lt;/h3&gt;

&lt;p&gt;kcptun的源码托管在：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/xtaci/kcptun&quot;&gt;xtaci/kcptun: A Simple UDP Tunnel Based On KCP&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是实际上有人做了一个一键安装脚本：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/kuoruan/kcptun_installer&quot;&gt;kuoruan/kcptun_installer: kcptun一键安装脚本&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://blog.kuoruan.com/110.html&quot;&gt;kcptun服务端一键安装脚本,喜闻乐见的多用户支持&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要做的就是使用VPS的Shell，&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;下这个repository，在目录下运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./kcptun.sh update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来就是按照提示输入参数即可，要注意SS的端口不要输错了，不明白的参数均保持默认即可，不用记住他们，因为最后一个界面都罗列出来了，要将这些内容保存下来，后面配置客户端会用到：
&lt;img src=&quot;/images/posts/14796121924338.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.4 客户端配置&lt;/h3&gt;

&lt;h4 id=&quot;macos&quot;&gt;2.4.1 客户端（macOS）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;第一步是下载并运行kcptun的客户端&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下载下来客户端程序，放置在你喜欢的、不会变动的位置，注意版本号尽量和服务器端保持一致吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796123234236.jpg&quot; alt=&quot;&quot; /&gt;
在此目录下新建一个文件，如&lt;code class=&quot;highlighter-rouge&quot;&gt;client.conf&lt;/code&gt;，将上一步最后的推荐客户端配置写入这个文件（一个JSON）。&lt;/p&gt;

&lt;p&gt;运行以下命令，我们要让它在后台一直运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup ./client_darwin_amd64 -c ./client.conf 1&amp;gt;&amp;gt; today.out 2&amp;gt;&amp;gt; today.err &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样整个梯子应该就全部搭好了。后续就是一些配置操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二步是配置Shadowsocks客户端&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果之前有测试过SS Server是否配置成功，你应该已经安装了相应的Shadowsocks客户端。类似这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796127457288.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中被色块覆盖掉得地方是你的VPS远程地址。&lt;/p&gt;

&lt;p&gt;而启用kcptun后，我们需要使用的是本机地址和配置文件中配置的本机端口（其中&lt;code class=&quot;highlighter-rouge&quot;&gt;localattr&lt;/code&gt;的值）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796129838853.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大功告成。剩下的是开启：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796172679626.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实际上，可以通过macOS的网络配置界面发现，自动代理模式采用的是PAC，并且这个PAC文件可以提供了一键更新；全局模式则是直接采用的SOCKS代理。这样，如果只是需要在特定软件中实现代理，就只要填写相应的参数就行了，比如Chrome的话，使用SwitchyOmega等插件。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;2.4.2 客户端（终端）&lt;/h4&gt;

&lt;p&gt;即便是在系统的网络设置中配置了代理，可是在终端中依然不能实现，可有时候用终端装个什么东西（比如&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install&lt;/code&gt;）也是隔着墙的。目前我找到的解决方案是使用tsocks。这里有使用homebrew在macOS上进行安装和使用的方法：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://blog.aizhet.com/Apple/17446.html&quot;&gt;mac osx使用homebrew安装tsocks-爱折腾技术网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（不过最后&lt;code class=&quot;highlighter-rouge&quot;&gt;tsocks wget https://google.com&lt;/code&gt;还是会失败的，应该是这个请求不允许非浏览器访问吧。）&lt;/p&gt;

&lt;h4 id=&quot;android&quot;&gt;2.4.3 客户端（Android）&lt;/h4&gt;

&lt;p&gt;在搞定桌面平台的配置后，安卓上的配置就显得简单了。只需要在Google Play上下载Shadowsocks的客户端，进行类似的配置即可。并且，安卓客户端上自带了对kcptun的支持，只需要填入之前配置kcptun服务器端最后提供给你的手机端用的参数即可。&lt;/p&gt;

&lt;p&gt;并且，安卓端上可以控制对哪些应用使用代理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14796222521508.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 19 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://iFanze.cn//2016/11/%E4%BD%BF%E7%94%A8VPS-Shadowsocks-Kcptun%E6%90%AD%E6%A2%AF%E5%AD%90/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/11/%E4%BD%BF%E7%94%A8VPS-Shadowsocks-Kcptun%E6%90%AD%E6%A2%AF%E5%AD%90/</guid>
        
        
      </item>
    
      <item>
        <title>Laravel v5.2 框架学习笔记（四）：数据库</title>
        <description>&lt;p&gt;注：Laravel数据访问层的使用，很容易理解，所以这一篇基本上就是把官网上的代码拷下来做查阅用的。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;入门&lt;/h2&gt;

&lt;p&gt;Laravel支持的三种与数据库交互的方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;raw SQL&lt;/li&gt;
  &lt;li&gt;fluent query builder&lt;/li&gt;
  &lt;li&gt;Eloquent ORM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Laravel支持的四种DBMS：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;Postgres&lt;/li&gt;
  &lt;li&gt;SQLite&lt;/li&gt;
  &lt;li&gt;SQL Server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;配置&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.php&lt;/code&gt;中有四种DBMS的配置模板。如果对读（select）和写（insert、update、delete）要求使用不同的配置。可以用以下写法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;mysql&#39; =&amp;gt; [
    &#39;read&#39; =&amp;gt; [
        &#39;host&#39; =&amp;gt; &#39;192.168.1.1&#39;,
    ],
    &#39;write&#39; =&amp;gt; [
        &#39;host&#39; =&amp;gt; &#39;196.168.1.2&#39;
    ],
    &#39;driver&#39;    =&amp;gt; &#39;mysql&#39;,
    &#39;database&#39;  =&amp;gt; &#39;database&#39;,
    &#39;username&#39;  =&amp;gt; &#39;root&#39;,
    &#39;password&#39;  =&amp;gt; &#39;&#39;,
    &#39;charset&#39;   =&amp;gt; &#39;utf8&#39;,
    &#39;collation&#39; =&amp;gt; &#39;utf8_unicode_ci&#39;,
    &#39;prefix&#39;    =&amp;gt; &#39;&#39;,
],
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;监听查询事件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace App\Providers;

use DB;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
        DB::listen(function ($query) {
            // $query-&amp;gt;sql
            // $query-&amp;gt;bindings
            // $query-&amp;gt;time
        });
    }

    public function register()
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;事务&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1.使用闭包自动进行commit或者rollback
DB::transaction(function () {
    DB::table(&#39;users&#39;)-&amp;gt;update([&#39;votes&#39; =&amp;gt; 1]);
    DB::table(&#39;posts&#39;)-&amp;gt;delete();
});

//2.手动控制
DB::beginTransaction();
DB::rollBack();
DB::commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;使用多个数据库连接&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$users = DB::connection(&#39;foo&#39;)-&amp;gt;select(...);

$pdo = DB::connection()-&amp;gt;getPdo();  //You may also access the raw, underlying PDO instance using the getPdo method on a connection instance
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;raw-sql&quot;&gt;Raw SQL&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;facade实现。&lt;/p&gt;

&lt;h3 id=&quot;select&quot;&gt;select&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1.参数绑定，可以防止SQL注入
$users = DB::select(&#39;select * from users where active = ?&#39;, [1]);
foreach ($users as $user) {
    echo $user-&amp;gt;name;
}

//2.具有命名的参数绑定
$results = DB::select(&#39;select * from users where id = :id&#39;, [&#39;id&#39; =&amp;gt; 1]);   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;insertupdatedelete&quot;&gt;insert、update、delete&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::insert(&#39;insert into users (id, name) values (?, ?)&#39;, [1, &#39;Dayle&#39;]);
$affected = DB::update(&#39;update users set votes = 100 where name = ?&#39;, [&#39;John&#39;]);
$deleted = DB::delete(&#39;delete from users&#39;);
//其它没有任何返回值的指令
DB::statement(&#39;drop table users&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;query-builder&quot;&gt;Query Builder&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$users = DB::table(&#39;users&#39;)-&amp;gt;get();                         //获取所有行，返回数组
$user = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;John&#39;)-&amp;gt;first(); //获取某一行，返回对象
$email = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;name&#39;, &#39;John&#39;)-&amp;gt;value(&#39;email&#39;);     //获取某一行的某一列

//如果量较大，可以分成小包进行处理：
DB::table(&#39;users&#39;)-&amp;gt;orderBy(&#39;id&#39;)-&amp;gt;chunk(100, function($users) {
    foreach ($users as $user) {
        //
    }
    //如果return false，则不再进行之后的操作
});

//某一列组成的列表
$titles = DB::table(&#39;roles&#39;)-&amp;gt;pluck(&#39;title&#39;);
foreach ($titles as $title)...
//可以为这个列表指定自定义的key
$roles = DB::table(&#39;roles&#39;)-&amp;gt;pluck(&#39;title&#39;, &#39;name&#39;);
foreach ($roles as $name =&amp;gt; $title)...

//聚合操作：count、max、min、avg、sum
$users = DB::table(&#39;users&#39;)-&amp;gt;count();
$price = DB::table(&#39;orders&#39;)-&amp;gt;max(&#39;price&#39;);

//综合应用：
$price = DB::table(&#39;orders&#39;)
                -&amp;gt;where(&#39;finalized&#39;, 1)
                -&amp;gt;avg(&#39;price&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;select-1&quot;&gt;select&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//指定列
$users = DB::table(&#39;users&#39;)-&amp;gt;select(&#39;name&#39;, &#39;email as user_email&#39;)-&amp;gt;get();
//distinct
$users = DB::table(&#39;users&#39;)-&amp;gt;distinct()-&amp;gt;get();
//向现有查询实例中添加列
$query = DB::table(&#39;users&#39;)-&amp;gt;select(&#39;name&#39;);
$users = $query-&amp;gt;addSelect(&#39;age&#39;)-&amp;gt;get();
//插入raw SQL
$users = DB::table(&#39;users&#39;)
                     -&amp;gt;select(DB::raw(&#39;count(*) as user_count, status&#39;))
                     -&amp;gt;where(&#39;status&#39;, &#39;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;&#39;, 1)
                     -&amp;gt;groupBy(&#39;status&#39;)
                     -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;join&quot;&gt;join&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Inner Join
$users = DB::table(&#39;users&#39;)
            -&amp;gt;join(&#39;contacts&#39;, &#39;users.id&#39;, &#39;=&#39;, &#39;contacts.user_id&#39;)
            -&amp;gt;join(&#39;orders&#39;, &#39;users.id&#39;, &#39;=&#39;, &#39;orders.user_id&#39;)
            -&amp;gt;select(&#39;users.*&#39;, &#39;contacts.phone&#39;, &#39;orders.price&#39;)
            -&amp;gt;get();
//Left Join
$users = DB::table(&#39;users&#39;)
            -&amp;gt;leftJoin(&#39;posts&#39;, &#39;users.id&#39;, &#39;=&#39;, &#39;posts.user_id&#39;)
            -&amp;gt;get();
//Cross Join
$users = DB::table(&#39;sizes&#39;)
            -&amp;gt;crossJoin(&#39;colours&#39;)
            -&amp;gt;get();
            
//更高级的Join，用闭包作第二个参数，其参数是JoinClause对象。`on`和`orOn`用于某列和某列进行比较
DB::table(&#39;users&#39;)
        -&amp;gt;join(&#39;contacts&#39;, function ($join) {
            $join-&amp;gt;on(&#39;users.id&#39;, &#39;=&#39;, &#39;contacts.user_id&#39;)-&amp;gt;orOn(...);
        })
        -&amp;gt;get();
//也可以使用`where`和`orWhere`，用于某列和某值进行比较
DB::table(&#39;users&#39;)
        -&amp;gt;join(&#39;contacts&#39;, function ($join) {
            $join-&amp;gt;on(&#39;users.id&#39;, &#39;=&#39;, &#39;contacts.user_id&#39;)
                 -&amp;gt;where(&#39;contacts.user_id&#39;, &#39;&amp;gt;&#39;, 5);
        })
        -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;union&quot;&gt;union&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$first = DB::table(&#39;users&#39;)
            -&amp;gt;whereNull(&#39;first_name&#39;);
$users = DB::table(&#39;users&#39;)
            -&amp;gt;whereNull(&#39;last_name&#39;)
            -&amp;gt;union($first)
            -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：&lt;code class=&quot;highlighter-rouge&quot;&gt;unionAll&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;union&lt;/code&gt;也有相同的用法&lt;/p&gt;

&lt;h3 id=&quot;where&quot;&gt;where&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1. 简单用法，操作符可以用`&amp;gt;=`、`&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;`、`like`等
$users = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, &#39;=&#39;, 100)-&amp;gt;get();
$users = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, 100)-&amp;gt;get();
$users = DB::table(&#39;users&#39;)-&amp;gt;where([
    [&#39;status&#39;,&#39;1&#39;],
    [&#39;subscribed&#39;,&#39;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;&#39;,&#39;1&#39;],
])-&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)
                    -&amp;gt;orWhere(&#39;name&#39;, &#39;John&#39;)
                    -&amp;gt;get();
//2. 判断范围
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereBetween(&#39;votes&#39;, [1, 100])-&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereNotBetween(&#39;votes&#39;, [1, 100])
                    -&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereIn(&#39;id&#39;, [1, 2, 3])
                    -&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereNotIn(&#39;id&#39;, [1, 2, 3])
                    -&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereNull(&#39;updated_at&#39;)
                    -&amp;gt;get();
$users = DB::table(&#39;users&#39;)
                    -&amp;gt;whereNotNull(&#39;updated_at&#39;)
                    -&amp;gt;get();
//3. 比较两列                    
$users = DB::table(&#39;users&#39;)
                -&amp;gt;whereColumn(&#39;first_name&#39;, &#39;last_name&#39;);
$users = DB::table(&#39;users&#39;)
                -&amp;gt;whereColumn(&#39;updated_at&#39;, &#39;&amp;gt;&#39;, &#39;created_at&#39;); 
$users = DB::table(&#39;users&#39;)
                -&amp;gt;whereColumn([
                    [&#39;first_name&#39;, &#39;last_name&#39;],
                    [&#39;updated_at&#39;, &#39;&amp;gt;&#39;, &#39;created_at&#39;]
                ]);                                                                                                               
//4. 参数分组
//select * from users where name = &#39;John&#39; or (votes &amp;gt; 100 and title &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt; &#39;Admin&#39;)
DB::table(&#39;users&#39;)
            -&amp;gt;where(&#39;name&#39;, &#39;=&#39;, &#39;John&#39;)
            -&amp;gt;orWhere(function ($query) {           //闭包作参数，其参数为一个query builder实例
                $query-&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)
                      -&amp;gt;where(&#39;title&#39;, &#39;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;&#39;, &#39;Admin&#39;);
            })
            -&amp;gt;get();            
//5. exists子句            
DB::table(&#39;users&#39;)
            -&amp;gt;whereExists(function ($query) {
                $query-&amp;gt;select(DB::raw(1))
                      -&amp;gt;from(&#39;orders&#39;)
                      -&amp;gt;whereRaw(&#39;orders.user_id = users.id&#39;);
            })
            -&amp;gt;get();
/*
    select * from users
    where exists (
        select 1 from orders where orders.user_id = users.id
    )
*/
//6. JSON where子句（需要MySQL 5.7或Postgres）
$users = DB::table(&#39;users&#39;)
                -&amp;gt;where(&#39;preferences-&amp;gt;dining-&amp;gt;meal&#39;, &#39;salad&#39;)
                -&amp;gt;get();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;order&quot;&gt;order&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//升降序
$users = DB::table(&#39;users&#39;)
                -&amp;gt;orderBy(&#39;name&#39;, &#39;desc&#39;)   //asc或desc
                -&amp;gt;get();
//随机序
$randomUser = DB::table(&#39;users&#39;)
                -&amp;gt;inRandomOrder()
                -&amp;gt;first();    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;grouphave&quot;&gt;group、have&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$users = DB::table(&#39;users&#39;)
                -&amp;gt;groupBy(&#39;account_id&#39;)
                -&amp;gt;having(&#39;account_id&#39;, &#39;&amp;gt;&#39;, 100)        //用法同where
                -&amp;gt;get();
$users = DB::table(&#39;orders&#39;)
                -&amp;gt;select(&#39;department&#39;, DB::raw(&#39;SUM(price) as total_sales&#39;))
                -&amp;gt;groupBy(&#39;department&#39;)
                -&amp;gt;havingRaw(&#39;SUM(price) &amp;gt; 2500&#39;)        //使用raw SQL
                -&amp;gt;get();                
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;limitoffset&quot;&gt;limit、offset&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$users = DB::table(&#39;users&#39;)-&amp;gt;skip(10)-&amp;gt;take(5)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;条件语句&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$role = $request-&amp;gt;input(&#39;role&#39;);
//如果when函数的第一个参数为true，就执行闭包中的查询。否则就不执行。
$users = DB::table(&#39;users&#39;)
                -&amp;gt;when($role, function ($query) use ($role) {
                    return $query-&amp;gt;where(&#39;role_id&#39;, $role);
                })
                -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;insert&quot;&gt;insert&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::table(&#39;users&#39;)-&amp;gt;insert(
    [&#39;email&#39; =&amp;gt; &#39;john@example.com&#39;, &#39;votes&#39; =&amp;gt; 0]
);
DB::table(&#39;users&#39;)-&amp;gt;insert([
    [&#39;email&#39; =&amp;gt; &#39;taylor@example.com&#39;, &#39;votes&#39; =&amp;gt; 0],
    [&#39;email&#39; =&amp;gt; &#39;dayle@example.com&#39;, &#39;votes&#39; =&amp;gt; 0]
]);
//返回自增的id（注意如果是postgres，要求自增的列名是id，否则将列名写在insertGetId()的第二个参数中）
$id = DB::table(&#39;users&#39;)-&amp;gt;insertGetId(
    [&#39;email&#39; =&amp;gt; &#39;john@example.com&#39;, &#39;votes&#39; =&amp;gt; 0]
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;update&quot;&gt;update&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::table(&#39;users&#39;)
            -&amp;gt;where(&#39;id&#39;, 1)
            -&amp;gt;update([&#39;votes&#39; =&amp;gt; 1]);
//快速自增自减
DB::table(&#39;users&#39;)-&amp;gt;increment(&#39;votes&#39;);
DB::table(&#39;users&#39;)-&amp;gt;increment(&#39;votes&#39;, 5);
DB::table(&#39;users&#39;)-&amp;gt;decrement(&#39;votes&#39;);
DB::table(&#39;users&#39;)-&amp;gt;decrement(&#39;votes&#39;, 5);
DB::table(&#39;users&#39;)-&amp;gt;increment(&#39;votes&#39;, 1, [&#39;name&#39; =&amp;gt; &#39;John&#39;]);  //同时更新其它列
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delete&quot;&gt;delete&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)-&amp;gt;delete();
DB::table(&#39;users&#39;)-&amp;gt;truncate(); //删除所有数据并置自动递增字段为0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pessimistic-locking&quot;&gt;悲观的锁（Pessimistic Locking）&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)-&amp;gt;sharedLock()-&amp;gt;get();      //防止更新
DB::table(&#39;users&#39;)-&amp;gt;where(&#39;votes&#39;, &#39;&amp;gt;&#39;, 100)-&amp;gt;lockForUpdate()-&amp;gt;get();   //防止更新或查询
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;migrations&quot;&gt;Migrations&lt;/h2&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;seeding&quot;&gt;Seeding&lt;/h2&gt;

&lt;!-- more --&gt;

</description>
        <pubDate>Fri, 10 Jun 2016 02:12:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/06/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/06/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>Laravel v5.2 框架学习笔记（三）：简单案例</title>
        <description>&lt;p&gt;注：官网上的demo，实现了一个简单的、与数据库有交互的Task List。&lt;/p&gt;

&lt;h2 id=&quot;basic-task-list&quot;&gt;教程：Basic Task List&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;新建工程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer create-project laravel/laravel quickstart --prefer-dist
&lt;span class=&quot;c&quot;&gt;# 或&lt;/span&gt;
laravel new quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;克隆成品(可选)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/laravel/quickstart-basic quickstart
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;quickstart
composer install
php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;准备数据库&lt;/h3&gt;

&lt;h4 id=&quot;database-migrations&quot;&gt;Database Migrations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;使用数据库Migrations来定义数据库的结构和编辑。&lt;/li&gt;
  &lt;li&gt;使用一下命令生成一个新的数据库Migration：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:migration create_tasks_table --create&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tasks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;打开生成在&lt;code class=&quot;highlighter-rouge&quot;&gt;database/migrations&lt;/code&gt;下的文件，增加一个string列：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function up()
{
   Schema::create(&#39;tasks&#39;, function (Blueprint $table) {
       $table-&amp;gt;increments(&#39;id&#39;);
       $table-&amp;gt;string(&#39;name&#39;);
       $table-&amp;gt;timestamps();
   });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;执行migrate：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;eloquent&quot;&gt;Eloquent模型&lt;/h4&gt;

&lt;p&gt;这是Laravel默认的ORM(Object-relation mapper)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用以下命令为我们刚刚建立在&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt;数据库中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;模型进行模型生成，生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;Task.php&lt;/code&gt;位于&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;目录下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:model Task
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;路由&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认全部定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/routes.php&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;这里我们需要三种路由：查看任务列表、添加任务、删除任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use App\Task;
use Illuminate\Http\Request;

Route::get(&#39;/&#39;, function () {
    return view(&#39;tasks&#39;);   //位于resources/views/tasks.blade.php
});

Route::post(&#39;/task&#39;, function (Request $request) {
    //
});

Route::delete(&#39;/task/{task}&#39;, function (Task $task) {
    //
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;布局和视图&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.blade.php&lt;/code&gt;代表使用Blade模板引擎。&lt;/li&gt;
  &lt;li&gt;建立模板页&lt;code class=&quot;highlighter-rouge&quot;&gt;resources/views/layouts/app.blade.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Laravel Quickstart - Basic&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CSS And JavaScript --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar navbar-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Navbar Contents --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        @yield(&#39;content&#39;)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;建立视图页&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;页：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@extends(&#39;layouts.app&#39;)

@section(&#39;content&#39;)

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Bootstrap Boilerplate... --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Display Validation Errors --&amp;gt;&lt;/span&gt;
        @include(&#39;common.errors&#39;)

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- New Task Form --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-horizontal&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            

            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Task Name --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-3 control-label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Task&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task-name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add Task Button --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-offset-3 col-sm-6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-plus&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Add Task
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TODO: Current Tasks --&amp;gt;&lt;/span&gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;添加任务&lt;/h3&gt;

&lt;h4 id=&quot;section-6&quot;&gt;表单验证&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::post&lt;/code&gt;函数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::post(&#39;/task&#39;, function (Request $request) {
    $validator = Validator::make($request-&amp;gt;all(), [
        &#39;name&#39; =&amp;gt; &#39;required|max:255&#39;,
    ]);

    if ($validator-&amp;gt;fails()) {
        return redirect(&#39;/&#39;)
            -&amp;gt;withInput()
            -&amp;gt;withErrors($validator);
    }

    // Create The Task...
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意，错误的输入和错误信息会在重定向到&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;后放入到session，这样就可以保持用户的输入状态。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;withErrors($validator)&lt;/code&gt;函数使得我们可以在view中通过&lt;code class=&quot;highlighter-rouge&quot;&gt;$errors&lt;/code&gt;访问出错信息。&lt;code class=&quot;highlighter-rouge&quot;&gt;common.errors&lt;/code&gt;被包含在了我们之前写的&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;页面中：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- resources/views/common/errors.blade.php --&amp;gt;&lt;/span&gt;

@if (count($errors) &amp;gt; 0)
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Form Error List --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert alert-danger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Whoops! Something went wrong!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            @foreach ($errors-&amp;gt;all() as $error)
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            @endforeach
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
@endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;创建任务&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;继续完善&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::post&lt;/code&gt;方法，保存正确的数据到数据库：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::post(&#39;/task&#39;, function (Request $request) {
    $validator = Validator::make($request-&amp;gt;all(), [
        &#39;name&#39; =&amp;gt; &#39;required|max:255&#39;,
    ]);

    if ($validator-&amp;gt;fails()) {
        return redirect(&#39;/&#39;)
            -&amp;gt;withInput()
            -&amp;gt;withErrors($validator);
    }

    $task = new Task;
    $task-&amp;gt;name = $request-&amp;gt;name;
    $task-&amp;gt;save();

    return redirect(&#39;/&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-8&quot;&gt;查看所有任务&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;路径：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;/&#39;, function () {
    $tasks = Task::orderBy(&#39;created_at&#39;, &#39;asc&#39;)-&amp;gt;get();

    return view(&#39;tasks&#39;, [
        &#39;tasks&#39; =&amp;gt; $tasks
    ]); //第二个参数：数组中每个key都可在视图模板中作为变量访问
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;编写&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@extends(&#39;layouts.app&#39;)

@section(&#39;content&#39;)
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Create Task Form... --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Current Tasks --&amp;gt;&lt;/span&gt;
    @if (count($tasks) &amp;gt; 0)
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel panel-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-heading&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                Current Tasks
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table table-striped task-table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table Headings --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Task&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table Body --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
                        @foreach ($tasks as $task)
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Task Name --&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;

                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TODO: Delete Button --&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                        @endforeach
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    @endif
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;删除任务&lt;/h3&gt;

&lt;h4 id=&quot;section-10&quot;&gt;添加删除按钮&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.blade.php&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;tr&amp;gt;
    &amp;lt;!-- Task Name --&amp;gt;
    &amp;lt;td class=&quot;table-text&quot;&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;

    &amp;lt;!-- Delete Button --&amp;gt;
    &amp;lt;td&amp;gt;
        &amp;lt;form action=&quot;&quot; method=&quot;POST&quot;&amp;gt;
            
            

            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&amp;gt;
                &amp;lt;i class=&quot;fa fa-trash&quot;&amp;gt;&amp;lt;/i&amp;gt; Delete
            &amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意，HTML表单的method只能是GET或者POST，所以这里不能用DELETE，而是用``生成&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&#39;hidden&#39; name=&#39;_method&#39; value=&#39;DELETE&#39;&lt;/code&gt;交给Laravel后台解析。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-11&quot;&gt;删除操作&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;完成&lt;code class=&quot;highlighter-rouge&quot;&gt;/task/{task}&lt;/code&gt;，这里使用了model binding的方式自动去除{task}作为形参，表示要删除的对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::delete(&#39;/task/{task}&#39;, function (Task $task) {
    $task-&amp;gt;delete();

    return redirect(&#39;/&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-12&quot;&gt;问题解决&lt;/h2&gt;

&lt;h3 id=&quot;section-13&quot;&gt;服务器无响应问题&lt;/h3&gt;

&lt;p&gt;问题描述：访问 http://seckillphp.ifanze-local.cn/quickstart/public 提示服务器无响应。
问题解决：记得给&lt;code class=&quot;highlighter-rouge&quot;&gt;storage&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap/cache&lt;/code&gt;赋777权限。&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;路由无效&lt;/h3&gt;

&lt;p&gt;问题描述：访问除主页外的地址，如http://seckillphp.ifanze-local.cn/quickstart/public/task，均显示404错误。
问题解决：这个问题应该出现在第二次开启服务器之后，因为是apache的rewrite模块没有开启或者配置正确的问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;httpd.conf&lt;/code&gt;中取消下面一行前的注释：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoadModule rewrite_module modules/mod_rewrite.so
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt;标签，使用：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowOverride all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;task-list&quot;&gt;教程2：升级版的Task List&lt;/h2&gt;

&lt;p&gt;与上一个项目相比，这个demo增加了用户登录和注册模块。这里只记录一些在这个教程中新学到的几项笔记。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;demo中，表单的URL是写死的，如&lt;code class=&quot;highlighter-rouge&quot;&gt;action=&#39;/task&#39;&lt;/code&gt;，这样对于我本机将网站根URL放在&lt;code class=&quot;highlighter-rouge&quot;&gt;http://seckillphp.ifanze-local.cn/quickstart/public&lt;/code&gt;位置上是不正确的。可以根据上一个教程的写法更正：&lt;code class=&quot;highlighter-rouge&quot;&gt;action=&quot;&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;框架已经自带了登录相关的Model配置，使用数据库Migration时会创建表&lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;password_resets&lt;/code&gt;，以及&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;Model。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan make:model Task&lt;/code&gt;创建的Model会默认使用名称为其复数形式的表。在Model的定义中，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$fillable&lt;/code&gt;属性指定使用”mass-assignable”的列，如：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Task extends Model
{
    protected $fillable = [&#39;name&#39;];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;为了表示user和tasks之间的一对多关系。需要在两个模型中进行相应的定义：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User extends Authenticatable
{
    /**
     * Get all of the tasks for the user.
     */
    public function tasks()
    {
        return $this-&amp;gt;hasMany(Task::class);
    }
}

class Task extends Model
{
    /**
     * Get the user that owns the task.
     */
    public function user()
    {
        return $this-&amp;gt;belongsTo(User::class);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;让Laravel自动生成登录注册相关的视图和路由，使用以下命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:auth
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;routes.php&lt;/code&gt;中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::auth()&lt;/code&gt;。
然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthController.php&lt;/code&gt;文件中配置：&lt;code class=&quot;highlighter-rouge&quot;&gt;protected $redirectTo = &#39;/tasks&#39;;&lt;/code&gt;
然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;Http/Middleware/RedirectIfAuthenticated.php&lt;/code&gt;中配置：&lt;code class=&quot;highlighter-rouge&quot;&gt;return redirect(&#39;/tasks&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Controller的指令：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:controller TaskController
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;配置路由指向Controller中的Method：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;/tasks&#39;, &#39;TaskController@index&#39;);
Route::post(&#39;/task&#39;, &#39;TaskController@store&#39;);
Route::delete(&#39;/task/{task}&#39;, &#39;TaskController@destroy&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用middleware来保证用户必须登录才能进入主页面：在controller的构造函数中，调用相应的middleware（所有可用的路由middleware在&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/Kernel.php&lt;/code&gt;中定义）：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function __construct()
{
   $this-&amp;gt;middleware(&#39;auth&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果视图是按照文件夹分组的：&lt;code class=&quot;highlighter-rouge&quot;&gt;return view(&#39;tasks.index&#39;);&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建Task，这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;user()&lt;/code&gt;可以自动设置新记录的&lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;值为当前登录用户的id。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function store(Request $request)
{
    $this-&amp;gt;validate($request, [
        &#39;name&#39; =&amp;gt; &#39;required|max:255&#39;,
    ]);

    $request-&amp;gt;user()-&amp;gt;tasks()-&amp;gt;create([
        &#39;name&#39; =&amp;gt; $request-&amp;gt;name,
    ]);

    return redirect(&#39;/tasks&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;p&gt;mb’ge&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Jun 2016 02:12:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/06/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89-%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/06/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89-%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（四）：高并发优化</title>
        <description>&lt;p&gt;注：续前文。这两天去上海参加了华测的一个参观交流活动，感觉比起同样前途光明的GIS行业，还是互联网更适合我呢。刚回来就发现慕课网这个视频最后一部分更新啦~赶快把第一章综述的内容看了看，大致了解了下高并发产生的瓶颈和CDN、Redis、存储过程等在进行并发优化的作用等等。做笔记如下。具体的编码我想等到自己把前面三课的内容实现了之后再继续学习吧。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;高并发优化分析&lt;/h2&gt;

&lt;p&gt;分析可能产生高并发的地方：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645378066039.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;详情页&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/14645378988870.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用CDN（内容分发网络）来加速用户获取数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般部署在离用户最近的网络节点上&lt;/li&gt;
  &lt;li&gt;命中CDN不需要访问后端服务器&lt;/li&gt;
  &lt;li&gt;互联网公司会自己搭建，或租用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;获取系统时间&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;获取系统时间不用优化：因为Java服务器访问一次内存大约只有10ns。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;秒杀地址接口分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;无法使用CDN缓存&lt;/li&gt;
  &lt;li&gt;适合服务器缓存：redis等（1wQPS）&lt;/li&gt;
  &lt;li&gt;一致性维护成本低（超时穿透/主动更新）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645381091286.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;秒杀操作优化分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;无法使用CDN缓存&lt;/li&gt;
  &lt;li&gt;后端缓存困难：库存问题，要通过MySQL的事务保证一致性。&lt;/li&gt;
  &lt;li&gt;一行数据竞争：热点商品&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;其他方案分析&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645365894875.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以扛住非常非常高的并发，腾讯阿里常用&lt;/li&gt;
  &lt;li&gt;运维成本和稳定性：NoSQL、MQ等都是分布式服务，不如MySQL稳定。需要一个强大的运维团队&lt;/li&gt;
  &lt;li&gt;开发成本：数据一致性，回滚方案等。工程师对这些要非常熟悉&lt;/li&gt;
  &lt;li&gt;幂等性难保证：重复秒杀问题。加大成本&lt;/li&gt;
  &lt;li&gt;是一个不适合新生的架构，主要因为如上这些成本性问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cg&quot;&gt;网络延迟和CG&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;对MySQL一条update进行压力测试：约4wQPS——不算低&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java控制事务行为分析：
&lt;img src=&quot;/images/posts/14645385010686.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;瓶颈分析：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645385711091.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Java GC：Garbage Collection，垃圾回收机制。Java + SQL + 网络延迟 + GC  ：这些共同导致低效&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;优化分析：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;行级锁在Commit之后释放&lt;/li&gt;
  &lt;li&gt;优化方向：减少行级锁持有时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;延迟分析（同城机房和异地机房）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14645372241542.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/posts/14645372413927.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;如何判断Update成功？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Update自身没报错&lt;/li&gt;
  &lt;li&gt;客户端确认Update影响记录数&lt;/li&gt;
  &lt;li&gt;优化思路：把客户端逻辑放在MySQL服务器端，避免网络延迟和GC影响&lt;/li&gt;
  &lt;li&gt;两种解决方案：修改源码定制SQL方案；使用存储过程让整个事务在MySQL端完成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-8&quot;&gt;优化总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;前端控制：暴露接口，按钮防重复&lt;/li&gt;
  &lt;li&gt;动静态数据分离：CDN缓存，后端缓存&lt;/li&gt;
  &lt;li&gt;事务竞争优化：减少事务锁时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis后端缓存优化编码&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;并发优化&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;系统部署架构&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;课程总结&lt;/h2&gt;

&lt;p&gt;（待更新）&lt;/p&gt;

</description>
        <pubDate>Sun, 29 May 2016 23:55:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E5%9B%9B-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E5%9B%9B-%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/</guid>
        
        <category>Java</category>
        
        <category>高并发</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>Laravel v5.2 框架学习笔记（二）：架构</title>
        <description>&lt;p&gt;注：官网这一部分的教程比较晦涩，自己花了点钱买了&lt;a href=&quot;laravist.com&quot;&gt;Laravist.com&lt;/a&gt;网站上的&lt;a href=&quot;https://laravist.com/series/peak-into-laravel-core-components&quot;&gt;理解 Laravel 核心概念&lt;/a&gt;视频看了看就有些眉目了。&lt;/p&gt;

&lt;h2 id=&quot;request-lifecycle&quot;&gt;Request Lifecycle&lt;/h2&gt;

&lt;h2 id=&quot;application-structure&quot;&gt;Application Structure&lt;/h2&gt;

&lt;h2 id=&quot;service-providers&quot;&gt;Service Providers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;config/app.php&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;providers&lt;/code&gt;数组里可以找到所有会加载的Service Providers，大多数只会在使用时加载（deferred）。&lt;/li&gt;
  &lt;li&gt;所有Service Providers都继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;Illuminate\Support\ServiceProvider&lt;/code&gt;类，需要至少定义&lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt;方法，在其中你应该仅仅进行一些绑定操作，并且不应该注册任何的事件监听器、路由、功能模块等。否则，你可能意外地使用由service provider提供的没有加载的服务。&lt;/li&gt;
  &lt;li&gt;可以用以下命令生成新的provider：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:provider RiakServiceProvider 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;service-container&quot;&gt;Service Container&lt;/h2&gt;

&lt;h2 id=&quot;contracts&quot;&gt;Contracts&lt;/h2&gt;

&lt;h2 id=&quot;facades&quot;&gt;Facades&lt;/h2&gt;

</description>
        <pubDate>Fri, 27 May 2016 02:12:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E6%9E%B6%E6%9E%84/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>Laravel v5.2 框架学习笔记（一）：基础</title>
        <description>&lt;p&gt;注：写完上一篇ThinkPHP框架，再写一篇Laravel框架的学习笔记感觉好怪异。主要是因为在知乎上看到了一些PHP框架相关的讨论，有很多人力推Laravel，又说ThinkPHP哪里怎么怎么不合理，代码质量一般，风格糟糕等等……然后就打开Laravel官网看了一眼，仅仅是打开看了一眼，我就决定抛弃掉ThinkPHP转投看着很高大上的Laravel了！！&lt;/p&gt;

&lt;p&gt;注2：新开一段理智下来，Laravel更显专业、成熟，学着更具挑战性，我还可能会从其优秀的代码风格中受益，框架自身也足够稳定。当然也不是说ThinkPHP就不好，或许用来写一般的应用同样简洁高效，并且是国产基因，有中文文档，这些都是他的优点。&lt;/p&gt;

&lt;p&gt;注3：这里记录下官方文档里最基础的几篇，可以快速入门，了解基本运行流程并新建一个涉及简单数据库读写的站点。&lt;/p&gt;

&lt;h2 id=&quot;laravel&quot;&gt;安装并创建Laravel项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;需要使用Composer。这个在上次装ThinkPHP的时候已经装了。不使用国内的镜像的话安装速度会很慢。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;laravel-installer&quot;&gt;方式一：使用Laravel installer创建项目&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer global require &lt;span class=&quot;s2&quot;&gt;&quot;laravel/install&quot;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#laravel会被安装到：~/.composer/verdor/bin，把它加入PATH&lt;/span&gt;
laravel new blog    &lt;span class=&quot;c&quot;&gt;#创建一个项目，目录名称为blog&lt;/span&gt;
laravel new         &lt;span class=&quot;c&quot;&gt;#如果新建了一个Git库，并想让laravel生成在库的根目录下，使用这个语句&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;composer-create-project&quot;&gt;方式二：使用composer create-project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer create-project --prefer-dist laravel/laravel blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;第一次运行&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在Apache中新建虚拟主机，配置网站的根目录为所创建项目下的&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;目录。具体方法见之前写的博客（编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;httpd-vhosts.conf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;文件）。&lt;/li&gt;
  &lt;li&gt;要配置&lt;code class=&quot;highlighter-rouge&quot;&gt;storage&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap/cache&lt;/code&gt;目录的访问权限，至少755。&lt;/li&gt;
  &lt;li&gt;在浏览器访问配置的主机名进行测试：
&lt;img src=&quot;/images/posts/14647055338077.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;环境配置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;中配置环境信息，其中&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_ENV&lt;/code&gt;即是环境名。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;不要使用版本控制，而应该使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.env.example&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;环境配置的读取&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env(&#39;APP_DEBUG&#39;, false)     //第二个参数为默认值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;判断当前环境&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$environment = App::environment();
//或者
if(App::environment(&#39;local&#39;, &#39;staging&#39;)){
    // 环境是local或者staging
}
//或者
$environment = app()-&amp;gt;environment();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;项目配置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;配置文件位于&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;目录。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;配置的访问&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$value = config(&#39;app.timezone&#39;);                //可以再设置默认值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;临时改变项目配置&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config([&#39;app.timezone&#39; =&amp;gt; &#39;America/Chicago&#39;]);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;项目维护&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;缓存的使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;为了提升性能，在生产环境中定期运行下面的命令可以将配置文件转成单个文件，在开发环境中不要用。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan config:cache
php artisan config:clear
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;开启维护模式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开启Maintenance Mode，可以对所有请求展示一个自定义视图，默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;resources/views/errors/503.blade.php&lt;/code&gt;。应在系统维护期使用。（&lt;a href=&quot;https://laravel.com/docs/5.2/configuration#maintenance-mode&quot;&gt;更多：关于队列任务和zero-downtime发布的实现&lt;/a&gt;）开启和关闭的指令分别是：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan down
php artisan up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-10&quot;&gt;路由&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/routes.php&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;支持的HTTP verb：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get($uri, $callback);
Route::post($uri, $callback);
Route::put($uri, $callback);
Route::patch($uri, $callback);
Route::delete($uri, $callback);
Route::options($uri, $callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果希望支持多个或者任意HTTP verb：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::match([&#39;get&#39;, &#39;post&#39;], &#39;/&#39;, $callback);
Route::any(&#39;/&#39;, $callback);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$callback&lt;/code&gt;既可以是匿名函数，也可以指定控制器下的方法，如：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;/&#39;, HomeController@index);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-11&quot;&gt;路由的参数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;必选参数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;posts/{post}/comments/{comment}&#39;, function ($postId, $commentId) {
    //
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;可选参数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;user/{name?}&#39;, function ($name = null) {
    //注意，$name要有默认值
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;使用正则表达式对参数进行限制：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;user/{id}/{name}&#39;, function ($id, $name) {
    //
})
-&amp;gt;where([&#39;id&#39; =&amp;gt; &#39;[0-9]+&#39;, &#39;name&#39; =&amp;gt; &#39;[a-z]+&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用正则表达式在项目全局范围内限制某参数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 位于：app/Providers/RouteServiceProvider.php
public function boot(Router $router)
{
    $router-&amp;gt;pattern(&#39;id&#39;, &#39;[0-9]+&#39;);
    parent::boot($router);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-12&quot;&gt;命名路由&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;三种方式：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;user/profile&#39;, [&#39;as&#39; =&amp;gt; &#39;profile&#39;, function () {
    //
}]);

Route::get(&#39;user/profile&#39;, [
    &#39;as&#39; =&amp;gt; &#39;profile&#39;, &#39;uses&#39; =&amp;gt; &#39;UserController@showProfile&#39;
]);

Route::get(&#39;user/profile&#39;, &#39;UserController@showProfile&#39;)-&amp;gt;name(&#39;profile&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;继而可以进行路由分组：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;as&#39; =&amp;gt; &#39;admin::&#39;], function () {
    Route::get(&#39;dashboard&#39;, [&#39;as&#39; =&amp;gt; &#39;dashboard&#39;, function () {
        // Route named &quot;admin::dashboard&quot;
    }]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;利用路由名称得到URL或进行重定向：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$url = route(&#39;profile&#39;);
$url = route(&#39;profile&#39;, [&#39;id&#39; =&amp;gt; 1]);   //带参数的写法

return redirect()-&amp;gt;route(&#39;profile&#39;);    //重定向
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-13&quot;&gt;路由分组的常见用途&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;公共的中间件：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;middleware&#39; =&amp;gt; &#39;auth&#39;], function () {
    Route::get(&#39;/&#39;, function ()    {
        // Uses Auth Middleware
    });

    Route::get(&#39;user/profile&#39;, function () {
        // Uses Auth Middleware
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;公共的命名空间（不用指定前缀&lt;code class=&quot;highlighter-rouge&quot;&gt;App\Http\Controllers&lt;/code&gt;）：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;namespace&#39; =&amp;gt; &#39;Admin&#39;], function()
{
    // Controllers Within The &quot;App\Http\Controllers\Admin&quot; Namespace

    Route::group([&#39;namespace&#39; =&amp;gt; &#39;User&#39;], function() {
        // Controllers Within The &quot;App\Http\Controllers\Admin\User&quot; Namespace
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;公共的子域名：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;domain&#39; =&amp;gt; &#39;{account}.myapp.com&#39;], function () {
    Route::get(&#39;user/{id}&#39;, function ($account, $id) {
        //
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;公共的路由前缀：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;prefix&#39; =&amp;gt; &#39;admin&#39;], function () {
    Route::get(&#39;users&#39;, function ()    {
        // Matches The &quot;/admin/users&quot; URL
    });
});

Route::group([&#39;prefix&#39; =&amp;gt; &#39;accounts/{account_id}&#39;], function () {
    Route::get(&#39;detail&#39;, function ($accountId)    {
        // Matches The &quot;/accounts/{account_id}/detail&quot; URL
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;csrf&quot;&gt;CSRF的防御&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;关于CSRF（Cross-site request forgery，跨站请求伪造）：&lt;a href=&quot;http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html&quot;&gt;查看详情&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在表单中使用：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等价于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;&amp;lt;?php echo csrf_token(); ?&amp;gt;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;web中间件组中的VerifyCsrfToken中间件会帮助你完成认证工作。&lt;/li&gt;
  &lt;li&gt;如果想排除对某些URI使用CSRF保护，可以defining their routes outside of the web middleware group that is included in the default routes.php file，或者编辑：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// app/Http/Middleware/VerifyCsrfToken.php
protected $except = [
   &#39;stripe/*&#39;,
];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-CSRF-TOKEN&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;X-XSRF-TOKEN&lt;/code&gt;就不说了，用到时再去了解吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-14&quot;&gt;路由中的模型绑定&lt;/h3&gt;

&lt;h4 id=&quot;section-15&quot;&gt;隐式绑定&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Laravel会自动寻找到ID与&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;匹配的&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;模型实例，如果找不到，会返回404。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;api/users/{user}&#39;, function (App\User $user) {
    return $user-&amp;gt;email;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果并不使用&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;列进行查找，可以在model中重写：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function getRouteKeyName()
{
    return &#39;slug&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-16&quot;&gt;显式绑定&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;如果要将参数名和模型绑定，编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;RouteServiceProvider::boot&lt;/code&gt;方法：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function boot(Router $router)
{
    parent::boot($router);
    //将{user}绑定到App\User，默认寻找的是id列
    $router-&amp;gt;model(&#39;user&#39;, &#39;App\User&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果要自定义寻找规则，编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;routes.php&lt;/code&gt;文件，增加：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$router-&amp;gt;bind(&#39;user&#39;, function ($value) {
    return App\User::where(&#39;name&#39;, $value)-&amp;gt;first();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果要自定义”not found“行为，就新增第三个参数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$router-&amp;gt;model(&#39;user&#39;, &#39;App\User&#39;, function () {
    throw new NotFoundHttpException;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;putdeleteput&quot;&gt;表单提交模拟PUT/DELETE/PUT等&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用以下三种方式之一：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&amp;gt;
&amp;lt;?php echo method_field(&#39;PUT&#39;); ?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;查看当前路由&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$route = Route::current();
$name = $route-&amp;gt;getName();
$actionName = $route-&amp;gt;getActionName();
//或
$name = Route::currentRouteName();
$action = Route::currentRouteAction();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-18&quot;&gt;中间件&lt;/h2&gt;

&lt;h3 id=&quot;section-19&quot;&gt;创建中间件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:middleware AgeMiddleware
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会自动生成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function handle($request, Closure $next)
{
   return $next($request);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function handle($request, Closure $next)
{
   if ($request-&amp;gt;input(&#39;age&#39;) &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;= 200) {
       return redirect(&#39;home&#39;);
   }
   return $next($request);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;beforeafter&quot;&gt;两种中间件：Before/After&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function handle($request, Closure $next)
{
   // Perform action
   return $next($request);
}

public function handle($request, Closure $next)
{
   $response = $next($request);
   // Perform action
   return $response;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-20&quot;&gt;注册中间件&lt;/h3&gt;

&lt;h4 id=&quot;section-21&quot;&gt;全局中间件&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/Kernel.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;$middleware&lt;/code&gt;属性，让所有请求都使用中间件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-22&quot;&gt;分配中间件给路由&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;首先在&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/Kernel.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;$routeMiddleware&lt;/code&gt;中注册个名字。&lt;/li&gt;
  &lt;li&gt;四种方式分配：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;admin/profile&#39;, [&#39;middleware&#39; =&amp;gt; &#39;auth&#39;, function () {
}]);

Route::get(&#39;/&#39;, [&#39;middleware&#39; =&amp;gt; [&#39;first&#39;, &#39;second&#39;], function () {
}]);

Route::get(&#39;/&#39;, function () {
})-&amp;gt;middleware([&#39;first&#39;, &#39;second&#39;]);

use App\Http\Middleware\FooMiddleware;
Route::get(&#39;admin/profile&#39;, [&#39;middleware&#39; =&amp;gt; FooMiddleware::class, function () {
}]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-23&quot;&gt;中间件分组&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;app/Http/Kernel.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;$middlewareGroups&lt;/code&gt;属性。默认创建了&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;两个分组。&lt;/li&gt;
  &lt;li&gt;可以将中间件组分配给路由：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::group([&#39;middleware&#39; =&amp;gt; [&#39;web&#39;]], function () {
    //
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：web中间件已经自动应用到了所有路由，在&lt;code class=&quot;highlighter-rouge&quot;&gt;RouteServiceProvider&lt;/code&gt;里。&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;中间件参数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如用户权限的判断，在&lt;code class=&quot;highlighter-rouge&quot;&gt;$next&lt;/code&gt;后新增参数：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function handle($request, Closure $next, $role)
{
   if (! $request-&amp;gt;user()-&amp;gt;hasRole($role)) {
       // Redirect...
   }
   return $next($request);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在路由定义中指定参数，用冒号将中间件名和参数分开，过个参数用逗号分开：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::put(&#39;post/{id}&#39;, [&#39;middleware&#39; =&amp;gt; &#39;role:editor&#39;, function ($id) {
    //
}]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;terminable-middleware&quot;&gt;有终止的中间件（Terminable Middleware）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果要在HTTP响应发送之后做一些事情，就要添加&lt;code class=&quot;highlighter-rouge&quot;&gt;terminate($request, $response)&lt;/code&gt;方法，还需要将它在HTTP Kernel中添加到全局中间件。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class StartSession
{
    public function handle($request, Closure $next)
    {
        return $next($request);
    }

    public function terminate($request, $response)
    {
        // Store the session data...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：执行&lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;terminate&lt;/code&gt;的方法的是服务容器中的两个中间件实例，如果想单例调用，要在容器中使用它的&lt;code class=&quot;highlighter-rouge&quot;&gt;singleton&lt;/code&gt;方法注册中间件。&lt;/p&gt;

&lt;h2 id=&quot;section-25&quot;&gt;控制器&lt;/h2&gt;

&lt;h3 id=&quot;section-26&quot;&gt;基本控制器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//定义控制器
class UserController extends Controller
{
    public function showProfile($id)
    {
        return view(&#39;user.profile&#39;, [&#39;user&#39; =&amp;gt; User::findOrFail($id)]);
    }
}

//添加路由
Route::get(&#39;user/{id}&#39;, &#39;UserController@showProfile&#39;);  //这里可以省略命名空间，全写是&#39;App\Http\Controllers\UserController&#39;

//命名路由
Route::get(&#39;foo&#39;, [&#39;uses&#39; =&amp;gt; &#39;FooController@method&#39;, &#39;as&#39; =&amp;gt; &#39;name&#39;]);
//根据路由名字得出Url
$url = route(&#39;name&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-27&quot;&gt;控制器上应用中间件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//方法1
Route::get(&#39;profile&#39;, [
    &#39;middleware&#39; =&amp;gt; &#39;auth&#39;,
    &#39;uses&#39; =&amp;gt; &#39;UserController@showProfile&#39;
]);

//方法2：在控制器构造函数使用`middleware`函数，甚至可以只对控制器中的个别方法应用中间件
class UserController extends Controller
{
    public function __construct()
    {
        $this-&amp;gt;middleware(&#39;auth&#39;);

        $this-&amp;gt;middleware(&#39;log&#39;, [&#39;only&#39; =&amp;gt; [
            &#39;fooAction&#39;,
            &#39;barAction&#39;,
        ]]);

        $this-&amp;gt;middleware(&#39;subscribed&#39;, [&#39;except&#39; =&amp;gt; [
            &#39;fooAction&#39;,
            &#39;barAction&#39;,
        ]]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;restful&quot;&gt;RESTful资源控制器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;创建：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan make:controller PhotoController --resource
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注册路由：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//全部
Route::resource(&#39;photo&#39;, &#39;PhotoController&#39;);

//个别
Route::resource(&#39;photo&#39;, &#39;PhotoController&#39;, [&#39;only&#39; =&amp;gt; [
    &#39;index&#39;, &#39;show&#39;
]]);
Route::resource(&#39;photo&#39;, &#39;PhotoController&#39;, [&#39;except&#39; =&amp;gt; [
    &#39;create&#39;, &#39;store&#39;, &#39;update&#39;, &#39;destroy&#39;
]]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/14653777955891.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果不想要默认的Route Name：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::resource(&#39;photo&#39;, &#39;PhotoController&#39;, [&#39;names&#39; =&amp;gt; [
    &#39;create&#39; =&amp;gt; &#39;photo.build&#39;
]]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果不想要默认的路由参数名（默认是根据资源名）：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//对应：/user/{admin_user}
Route::resource(&#39;user&#39;, &#39;AdminUserController&#39;, [&#39;parameters&#39; =&amp;gt; [
    &#39;user&#39; =&amp;gt; &#39;admin_user&#39;
]]);

//单数化参数，对应：/users/{user}/photos/{photo}
Route::resource(&#39;users.photos&#39;, &#39;PhotoController&#39;, [
    &#39;parameters&#39; =&amp;gt; &#39;singular&#39;
]);

//统一配置对应参数：
Route::resourceParameters([
    &#39;user&#39; =&amp;gt; &#39;person&#39;, &#39;photo&#39; =&amp;gt; &#39;image&#39;
]);

//全局配置使用单数化
Route::singularResourceParameters();

//优先级依次降低（前两种相同）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果要新增更多的action，要写在&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::resource&lt;/code&gt;之前：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Route::get(&#39;photos/popular&#39;, &#39;PhotoController@method&#39;);
Route::resource(&#39;photos&#39;, &#39;PhotoController&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-28&quot;&gt;依赖注入与控制器&lt;/h3&gt;

&lt;h4 id=&quot;section-29&quot;&gt;构造函数注入&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace App\Http\Controllers;
use App\Repositories\UserRepository;
class UserController extends Controller
{
    protected $users;
    
    public function __construct(UserRepository $users)
    {
        $this-&amp;gt;users = $users;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：如果容器可以解析，你就可以指定任意Laravel contract。&lt;/p&gt;

&lt;h4 id=&quot;section-30&quot;&gt;方法注入&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//注入Illuminate\Http\Request
use Illuminate\Http\Request;
class UserController extends Controller
{
    public function store(Request $request)
    {
        $name = $request-&amp;gt;input(&#39;name&#39;);
        //
    }
}

//如果路由需要参数
Route::put(&#39;user/{id}&#39;, &#39;UserController@update&#39;);
class UserController extends Controller
{
    public function update(Request $request, $id)
    {
        
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-31&quot;&gt;路由缓存&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;缓存不适用于闭包路由&lt;/li&gt;
  &lt;li&gt;使用缓存可以减少路由注册所花费的时间，甚至可以提速100%。同样别在开发环境用。&lt;/li&gt;
  &lt;li&gt;使用以下命令开关：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan route:cache
php artisan route:clear
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-32&quot;&gt;请求&lt;/h2&gt;

&lt;h3 id=&quot;request&quot;&gt;访问Request&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace App\Http\Controllers;
use Illuminate\Http\Request;
class UserController extends Controller
{
    public function update(Request $request, $id)   //id传自路由
    {
        
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-33&quot;&gt;基本请求信息&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$request-&amp;gt;path();           //返回格式：&quot;/foo/bar&quot;
$request-&amp;gt;url();            //返回格式：&quot;http://domain.com/foo&quot;
$request-&amp;gt;fullUrl();        //返回格式：&quot;http://domain.com/foo?bar=baz&quot;
$request-&amp;gt;fullUrlWithQuery([&#39;bar&#39; =&amp;gt; &#39;baz&#39;]);   //返回格式：&quot;http://domain.com/foo?bar=baz&quot;
$request-&amp;gt;is(&#39;admin/*&#39;);    //返回true或false
$request-&amp;gt;isMethod(&#39;post&#39;); //返回true或false

$name = $request-&amp;gt;input(&#39;name&#39;);            //不管get/post
$name = $request-&amp;gt;input(&#39;name&#39;, &#39;Sally&#39;);   //带默认值
$name = $request-&amp;gt;input(&#39;products.0.name&#39;); //读入数组中的某个特定元素
$names = $request-&amp;gt;input(&#39;products.*.name&#39;);//读入数组
$name = $request-&amp;gt;input(&#39;user.name&#39;);       //读取Json格式的请求，需要Content-Type是&quot;Json&quot;
$request-&amp;gt;has(&#39;name&#39;);                      //判断
$request-&amp;gt;all();                            //读入所有数据为数组
$input = $request-&amp;gt;only([&#39;username&#39;, &#39;password&#39;]);  //读入部分数据为数组
$input = $request-&amp;gt;only(&#39;username&#39;, &#39;password&#39;);
$input = $request-&amp;gt;except([&#39;credit_card&#39;]);
$input = $request-&amp;gt;except(&#39;credit_card&#39;);

$name = $request-&amp;gt;name;                     //利用动态属性访问，Laravel会首先匹配请求参数，再匹配路由参数

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;laravelpsr-7&quot;&gt;将经典Laravel请求和响应转成PSR-7&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装以下库：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer require symfony/psr-http-message-bridge
composer require zendframework/zend-diactoros
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;格式：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use Psr\Http\Message\ServerRequestInterface;
Route::get(&#39;/&#39;, function (ServerRequestInterface $request) {
    //返回的PSR-7响应会自动转成经典Laravel响应。
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-34&quot;&gt;将输入保存到下次请求&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//将输入存入Session
$request-&amp;gt;flash();
$request-&amp;gt;flashOnly([&#39;username&#39;, &#39;email&#39;]);
$request-&amp;gt;flashExcept(&#39;password&#39;);
//将输入存入Session然后重定向
return redirect(&#39;form&#39;)-&amp;gt;withInput();
return redirect(&#39;form&#39;)-&amp;gt;withInput($request-&amp;gt;except(&#39;password&#39;));
//重新获取旧数据
$username = $request-&amp;gt;old(&#39;username&#39;);
//在Blade template中获取旧数据，如果没有数据返回null
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cookies&quot;&gt;Cookies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用Laravel创建的Cookie都是加密的，如果客户端改变了它就会无效。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//获取cookie
$value = $request-&amp;gt;cookie(&#39;name&#39;);
$response = new Illuminate\Http\Response(&#39;Hello World&#39;);

//返回cookie
$response-&amp;gt;withCookie(&#39;name&#39;, &#39;value&#39;, $minutes);
return $response;

//返回永久cookie（5年）
$response-&amp;gt;withCookie(cookie()-&amp;gt;forever(&#39;name&#39;, &#39;value&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-35&quot;&gt;请求中的文件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$request-&amp;gt;file(&#39;photo&#39;);    //返回Symfony\Component\HttpFoundation\File\UploadedFile对象，这个对象扩展了PHP的SplFileInfo，提供很多与文件交互的方法
$request-&amp;gt;hasFile(&#39;photo&#39;); //返回bool，判断文件是否在请求中存在
$request-&amp;gt;file(&#39;photo&#39;)-&amp;gt;isValid(); //返回bool，确定文件是否上传成功

$request-&amp;gt;file(&#39;photo&#39;)-&amp;gt;move($destinationPath);    //移动上传的文件（从PHP配置的临时目录移动到特定目录）
$request-&amp;gt;file(&#39;photo&#39;)-&amp;gt;move($destinationPath, $fileName);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-&lt;a href=&quot;http://api.symfony.com/3.0/Symfony/Component/HttpFoundation/File/UploadedFile.html&quot;&gt;更多UploadedFile的API。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-36&quot;&gt;响应&lt;/h2&gt;

&lt;h3 id=&quot;section-37&quot;&gt;基本响应&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//返回字符串
return &#39;Hello World&#39;;
//返回对象（Illuminate\Http\Response，可自定义HTTP状态码和headers，继承自Symfony\Component\HttpFoundation\Response,提供创建响应的方法。）
return (new Response($content, $status))-&amp;gt;header(&#39;Content-Type&#39;, $value);
//使用response helper简化：
return response($content, $status)-&amp;gt;header(&#39;Content-Type&#39;, $value);

//指定headers的两种方法
return response($content)
            -&amp;gt;header(&#39;Content-Type&#39;, $type)
            -&amp;gt;header(&#39;X-Header-One&#39;, &#39;Header Value&#39;)
            -&amp;gt;header(&#39;X-Header-Two&#39;, &#39;Header Value&#39;);
return response($content)
            -&amp;gt;withHeaders([
                &#39;Content-Type&#39; =&amp;gt; $type,
                &#39;X-Header-One&#39; =&amp;gt; &#39;Header Value&#39;,
                &#39;X-Header-Two&#39; =&amp;gt; &#39;Header Value&#39;,
            ]);
            
//指定cookies
return response($content)
                -&amp;gt;header(&#39;Content-Type&#39;, $type)
                -&amp;gt;cookie(&#39;name&#39;, &#39;value&#39;);
//完整版的cookie函数
-&amp;gt;cookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)
//在方法中使用Cookie::queue添加
public function index()
{
   Cookie::queue(&#39;saw_dashboard&#39;, true, 15);
   return view(&#39;dashboard&#39;);
}
//取消对cookie的加密：在App\Http\Middleware\EncryptCookies中间件中配置$except，填入不想加密的cookie的名字
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-38&quot;&gt;其它响应&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//视图响应：不用传递HTTP状态码和headers
return response()
            -&amp;gt;view(&#39;hello&#39;, $data)
            -&amp;gt;header(&#39;Content-Type&#39;, $type);
//JSON响应：自动设置Content-Type为application/json，自动将参数用json_encode转成字符串
return response()-&amp;gt;json([&#39;name&#39; =&amp;gt; &#39;Abigail&#39;, &#39;state&#39; =&amp;gt; &#39;CA&#39;]);
//JSONP响应：后再接setCallback
return response()
            -&amp;gt;json([&#39;name&#39; =&amp;gt; &#39;Abigail&#39;, &#39;state&#39; =&amp;gt; &#39;CA&#39;])
            -&amp;gt;setCallback($request-&amp;gt;input(&#39;callback&#39;));
//文件下载响应（$name是默认文件名，Symfony HttpFoudation要求文件名是ASCII）：
return response()-&amp;gt;download($pathToFile);
return response()-&amp;gt;download($pathToFile, $name, $headers);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-39&quot;&gt;重定向&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//基本的重定向
return redirect(&#39;home/dashboard&#39;);

//浏览器后退，注意保证这个路由在使用web中间件组或者拥有所有session中间件应用的
return back()-&amp;gt;withInput();

//重定向到命名路由
return redirect()-&amp;gt;route(&#39;login&#39;);
return redirect()-&amp;gt;route(&#39;profile&#39;, [&#39;id&#39; =&amp;gt; 1]);
return redirect()-&amp;gt;route(&#39;profile&#39;, [$user]);   //$user是Eloquent Model，会自动使用ID属性。

//重定向到控制器方法（也可以再加路由参数）
return redirect()-&amp;gt;action(&#39;HomeController@index&#39;);

//带Session的重定向
Route::post(&#39;user/profile&#39;, function () {
    // Update the user&#39;s profile...
    return redirect(&#39;dashboard&#39;)-&amp;gt;with(&#39;status&#39;, &#39;Profile updated!&#39;);
});
//在模板中获得session
@if (session(&#39;status&#39;))
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alert alert-success&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
@endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-40&quot;&gt;响应宏&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//在App/Providers目录下的service provider类的boot方法中添加：
namespace App\Providers;

use Response;
use Illuminate\Support\ServiceProvider;

class ResponseMacroServiceProvider extends ServiceProvider
{
    /**
     * Perform post-registration booting of services.
     *
     * @return void
     */
    public function boot()
    {
        Response::macro(&#39;caps&#39;, function ($value) {
            return Response::make(strtoupper($value));
        });
    }
}
//使用response方法或者ResponsFactory的实现来使用定义的宏：
return response()-&amp;gt;caps(&#39;foo&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-41&quot;&gt;视图&lt;/h2&gt;

&lt;h3 id=&quot;section-42&quot;&gt;基本用法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return view(&#39;greeting&#39;, [&#39;name&#39; =&amp;gt; &#39;James&#39;]);
return view(&#39;admin.profile&#39;, $data);            //位于resources/views/admin/profile.php
view()-&amp;gt;exists(&#39;emails.customer&#39;)               //返回bool，判断是否存在
view()                                          //返回Illuminate\Contracts\View\Factory的实例，可以使用该工厂类的方法

return view(&#39;greeting&#39;)-&amp;gt;with(&#39;name&#39;, &#39;Victoria&#39;);  //传一对独立的参数

//与所有视图共享数据，在服务容器的boot方法中调用view()-&amp;gt;share()
class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
        view()-&amp;gt;share(&#39;key&#39;, &#39;value&#39;);
    }

    public function register()
    {
        //
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;view-composers&quot;&gt;View Composers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;是视图呈现时被调用的回调函数或类成员函数。如果想每次视图呈现时都绑定一些数据，它可以帮你在一个地方组织相关的逻辑。Laravel并没有为之提供默认的目录，这里我们创建&lt;code class=&quot;highlighter-rouge&quot;&gt;App\Http\ViewComposers&lt;/code&gt;，在其中定义composer类。：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace App\Providers;
use Illuminate\Support\ServiceProvider;
//新建的service provider，要对config/app.php的providers进行配置。
class ComposerServiceProvider extends ServiceProvider
{
    public function boot()
    {
        // Using class based composers...
        view()-&amp;gt;composer(
            &#39;profile&#39;, &#39;App\Http\ViewComposers\ProfileComposer&#39;
        );

        // Using Closure based composers...
        view()-&amp;gt;composer(&#39;dashboard&#39;, function ($view) {
            //
        });
    }

    public function register()
    {
        //
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这样，每次调用视图，&lt;code class=&quot;highlighter-rouge&quot;&gt;ProfileComposer@compose&lt;/code&gt;就会被执行：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace App\Http\ViewComposers;

use Illuminate\View\View;
use App\Repositories\UserRepository;

class ProfileComposer
{
    protected $users;

    public function __construct(UserRepository $users)
    {
        $this-&amp;gt;users = $users;
    }

    public function compose(View $view)
    {
        $view-&amp;gt;with(&#39;count&#39;, $this-&amp;gt;users-&amp;gt;count());
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;可以将一个composer用于多个视图：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view()-&amp;gt;composer(
    [&#39;profile&#39;, &#39;dashboard&#39;],
    &#39;App\Http\ViewComposers\MyViewComposer&#39;
);

view()-&amp;gt;composer(&#39;*&#39;, function ($view) {
    //
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;View Creators的作用和Composers类似，但前者是视图被初始化时调用，后者是将要呈现（render）时调用。注册view creator的方法如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;view()-&amp;gt;creator(&#39;profile&#39;, &#39;App\Http\ViewCreators\ProfileCreator&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;blade&quot;&gt;Blade模板&lt;/h2&gt;

&lt;h3 id=&quot;section-43&quot;&gt;定义布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@section&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@yield&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Stored in resources/views/layouts/master.blade.php --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;App Name - @yield(&#39;title&#39;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        @section(&#39;sidebar&#39;)
            This is the master sidebar.
        @show

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            @yield(&#39;content&#39;)
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-44&quot;&gt;使用布局页&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@extends&lt;/code&gt;指定布局。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Stored in resources/views/child.blade.php --&amp;gt;&lt;/span&gt;

@extends(&#39;layouts.master&#39;)

@section(&#39;title&#39;, &#39;Page Title&#39;)

@section(&#39;sidebar&#39;)
    @parent

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is appended to the master sidebar.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
@endsection

@section(&#39;content&#39;)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is my body content.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-45&quot;&gt;显示数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//数据绑定：
Route::get(&#39;greeting&#39;, function () {
    return view(&#39;welcome&#39;, [&#39;name&#39; =&amp;gt; &#39;Samantha&#39;]);
});

//模板页：
Hello, .
The current UNIX timestamp is .     //可以使用任意PHP代码，会使用htmlentities来防止XSS攻击。
Hello, {!! $name !!}.                           //如果不想使用上述防止XSS攻击的特性
Hello, @.                             //使用@来保持不被Blade引擎处理，比如Javascript中的大括号。
          //带有存在验证的
                        //同上，简写

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-46&quot;&gt;流程控制&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//条件判断1
@if (count($records) === 1)
    I have one record!
@elseif (count($records) &amp;gt; 1)
    I have multiple records!
@else
    I don&#39;t have any records!
@endif
//条件判断2
@unless (Auth::check())
    You are not signed in.
@endunless
//在布局页面中判断section是否有内容
@hasSection(&#39;title&#39;)
   @yield(&#39;title&#39;) - App Name
@else
   App Name
@endif

//循环
@for ($i = 0; $i &lt;span class=&quot;nt&quot;&gt;&amp;lt; 10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endfor&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;This is user &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
@endforeach

@forelse ($users as $user)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
@empty
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No users&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
@endforelse

@while (true)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I&#39;m looping forever.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
@endwhile

//continue和break
@foreach ($users as $user)
    @if($user-&amp;gt;type == 1)
        @continue
    @endif
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    @if($user-&amp;gt;number == 5)
        @break
    @endif
@endforeach

//continue和break的简写
@foreach ($users as $user)
    @continue($user-&amp;gt;type == 1)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    @break($user-&amp;gt;number == 5)
@endforeach

//包含子视图，视图参数会继承到其中
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    @include(&#39;shared.errors&#39;)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Form Contents --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

//如果还要向其中传入更多参数
@include(&#39;view.name&#39;, [&#39;some&#39; =&amp;gt; &#39;data&#39;])

//如果要包含多个子视图，可以简写成：
@each(&#39;view.name&#39;, $jobs, &#39;job&#39;)            //第一个参数：视图名，第二个参数：想要迭代的数组，第三个参数：迭代变量，还可以有第四个参数：在$jobs为空时的视图名

//注释

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;stacks&quot;&gt;Stacks&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@push(&#39;scripts&#39;)
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/example.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
@endpush
//可以多次引用同一个stack：
@stack(&#39;scripts&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;service-injection&quot;&gt;Service Injection&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@inject(&#39;metrics&#39;, &#39;App\Services\MetricsService&#39;)

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Monthly Revenue: .
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;blade-1&quot;&gt;扩展Blade&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;你可以自己注册指令，如创建一个格式化日期用的&lt;code class=&quot;highlighter-rouge&quot;&gt;@datetime($var)&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
        Blade::directive(&#39;datetime&#39;, function($expression) {
            return &quot;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;m/d/Y H:i&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&quot;;
        });
    }
    
    public function register(){}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 27 May 2016 02:12:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%9F%BA%E7%A1%80/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/Laravel-v5.2-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%9F%BA%E7%A1%80/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>【慕课网】快速入门ThinkPHP框架——理论篇</title>
        <description>&lt;p&gt;注：这是慕课网视频“快速入门ThinkPHP框架——理论篇”的笔记。之前做项目用的MVC框架是自己手写的，ThinkPHP也算是PHP框架里比较知名的了，这次体验一下。因为之前已经有MVC的基础了，一天时间就把这个视频刷完了。这里记录的算是CheatSheet吧，供以后查阅。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;框架是什么&lt;/h2&gt;

&lt;p&gt;框架是程序结构代码的集合，而不是业务逻辑代码。
ThinkPHP：国产、开源、面向对象、MVC、查询语言丰富、详尽的文档、中文注释。&lt;/p&gt;

&lt;h2 id=&quot;thinkphp&quot;&gt;ThinkPHP基础&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;建立简单项目，了解运行流程&lt;/li&gt;
  &lt;li&gt;URL模式，简历自定义函数库&lt;/li&gt;
  &lt;li&gt;模板技术，调试模式和运行状态&lt;/li&gt;
  &lt;li&gt;数据库常用操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;单一入口框架&lt;/h2&gt;

&lt;p&gt;在一个网站中，所有请求都是指向一个脚本文件。使得项目结构规范，控制灵活，更加安全。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;创建项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;把下载到的&lt;code class=&quot;highlighter-rouge&quot;&gt;ThinkPHP&lt;/code&gt;目录放在网站根目录，新建&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;APP_NAME&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;App&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;APP_PATH&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./App/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//注意斜线。
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./ThinkPHP/ThinkPHP.php&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;访问一次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;目录结构&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Commom：公共函数&lt;/li&gt;
  &lt;li&gt;Conf：配置文件&lt;/li&gt;
  &lt;li&gt;Lang：语言包&lt;/li&gt;
  &lt;li&gt;Lib：控制器和模型（Action、Behavior、Model、Widget）&lt;/li&gt;
  &lt;li&gt;Runtime：运行时文件（Cache、Data、Logs等）&lt;/li&gt;
  &lt;li&gt;Tpl：模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;运行流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;加载thinkphp.php&lt;/li&gt;
  &lt;li&gt;加载核心文件（&lt;code class=&quot;highlighter-rouge&quot;&gt;./thinkHP/LBI/core&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;加载项目的文件，分析URL，调用相关控制器（URL：&lt;code class=&quot;highlighter-rouge&quot;&gt;/index.php?m=index&amp;amp;a=index&lt;/code&gt;，对应&lt;code class=&quot;highlighter-rouge&quot;&gt;index.class.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;方法）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;配置文件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;框架的配置文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;/ThinkPHP/Conf/convertion.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;项目的配置文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;/App/Conf/config.php&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;C(&quot;xxx&quot;)&lt;/code&gt;可访问到配置项，注意在index.php处添加&lt;code class=&quot;highlighter-rouge&quot;&gt;define(&#39;APP_DEBUG&#39;, true)&lt;/code&gt;，才能使每次访问都读取配置文件。如果要自定义配置文件，如增加&lt;code class=&quot;highlighter-rouge&quot;&gt;user.php&lt;/code&gt;，需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;中增加&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;LOAD_EXT_CONFIG&#39;=&amp;gt;&#39;user&#39;&lt;/code&gt;，且无论是否在Debug状态，每次访问都会读取它。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;url&quot;&gt;URL模式&lt;/h2&gt;

&lt;p&gt;在config.php里配置，也可用C(‘URL_MODEL’)访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认模式：pathinfo模式。&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php/index/user/id/1.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;普通模式：0：&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php?m=Index&amp;amp;a=user&amp;amp;id=1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;重写模式：2：&lt;code class=&quot;highlighter-rouge&quot;&gt;index/user/id/1.html&lt;/code&gt;（需要在apache中配置）&lt;/li&gt;
  &lt;li&gt;兼容模式：3：&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php?s=/Index/user/id/1.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用U方法可以构造URL，若第四个参数为true，则会直接跳转到构造出的URL：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;U(&#39;模块/方法&#39;, array(&#39;id&#39;=&amp;gt;1), &#39;html&#39;, false, &#39;localhost&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;indexphp&quot;&gt;重写模式下隐藏&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开启mod_rewrite.so&lt;/li&gt;
  &lt;li&gt;在根目录创建&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;文件：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Ifmodule mod_rewrite.c&amp;gt;
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php/$1[QSA,PT,L]
&amp;lt;/Ifmodule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;url-1&quot;&gt;URL伪静态&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost/muke/Index/user/id/1.html&lt;/code&gt;会正确把&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;识别为&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost/muke/Index/user/id/1.shtml&lt;/code&gt;会把&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;识别为&lt;code class=&quot;highlighter-rouge&quot;&gt;1.shtml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;需要在配置文件设置：&lt;code class=&quot;highlighter-rouge&quot;&gt;URL_HTML_SUFFIX&lt;/code&gt;即可，有多种格式就用&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;隔开。&lt;/li&gt;
  &lt;li&gt;可以让搜索引擎认为这是静态页面，更易被检索到。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;自定义函数库&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Common&lt;/code&gt;里建立&lt;code class=&quot;highlighter-rouge&quot;&gt;Common.php&lt;/code&gt;，在其中定义函数进行使用。&lt;/li&gt;
  &lt;li&gt;ThinkPHP自带的dump()函数比var_dump()更好用，可以格式化输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;建立项目模板&lt;/h2&gt;

&lt;h3 id=&quot;section-8&quot;&gt;基本用法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Tpl&lt;/code&gt;里建立Action名字的文件夹，如&lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt;。在其中以function名字建立html页面，如&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在Action中调用&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display()&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display(&quot;Index/index&quot;)&lt;/code&gt;即可。&lt;/li&gt;
  &lt;li&gt;向模板传参的方式：&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;assign(&quot;变量名&quot;, 变量值);&lt;/code&gt;，assign函数可以在一个语句中连续调用。然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;里直接插入PHP片段即可输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-9&quot;&gt;模板引擎介绍&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ThinkPHP/Lib/Template/ThinkTemplate.class.php&lt;/code&gt;中即是ThinkPHP的模板引擎。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;name&#39;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.sex|default=&#39;man&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;可以在模板中获取值。&lt;/li&gt;
  &lt;li&gt;注意&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;age&#39;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;不能用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me.age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;替代。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-10&quot;&gt;模板引擎调用函数和系统参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$me[&#39;name&#39;]|md5|substr=0,5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//相当于$name=substr(md&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$now|date=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Y-m-d H:i:s&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,###}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//使用###表示占位&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//调用系统参数&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$Think.server.http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;volistforeachfor&quot;&gt;循环：volist、foreach、for&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$person = array(
    1 =&amp;gt; array(&#39;name&#39;=&amp;gt;&#39;Jack&#39;, &#39;age&#39;=&amp;gt;18),
    ...
);

&amp;lt;volist name=&#39;person&#39; id=&#39;data&#39; offset=&#39;1&#39; length=&#39;3&#39; empty=&#39;没有数据&#39;&amp;gt;
{$data[&#39;name&#39;]} ------- {$data[&#39;age&#39;]}&amp;lt;br/&amp;gt;
&amp;lt;/volist&amp;gt;

&amp;lt;foreach name=&#39;person&#39; item=&#39;data&#39;&amp;gt;
同上，但是截取方式和volist不同。
&amp;lt;/foreach&amp;gt;

&amp;lt;for start=&#39;1&#39; end=&#39;10&#39; comparison=&#39;elt&#39; name=&#39;k&#39;&amp;gt;
{$k}&amp;lt;br/&amp;gt;
&amp;lt;/for&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;eq    neq     gt      egt     lt      elt     heq     nheq&lt;/li&gt;
  &lt;li&gt;=     !=      &amp;gt;       &amp;gt;=      &amp;lt;       &amp;lt;=      ===     !==&lt;/li&gt;
  &lt;li&gt;for循环的默认comparision是lt。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ifswitch&quot;&gt;判断：if、switch&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;if condition=&quot;$num gt 10&quot;&amp;gt;
num大于10
&amp;lt;elseif condition=&quot;$num lt 10&quot; /&amp;gt; 
num小于10
&amp;lt;else/&amp;gt;
num等于10
&amp;lt;/if&amp;gt;

&amp;lt;switch name=&#39;num&#39;&amp;gt;
    &amp;lt;case value=&#39;1&#39;&amp;gt;1&amp;lt;/case&amp;gt;
    &amp;lt;case value=&#39;2|3|4&#39;&amp;gt;2|3|4&amp;lt;/case&amp;gt;
    &amp;lt;default/&amp;gt;other
&amp;lt;/switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意elseif和else要关闭标签。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;比较&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;比较标签 name=&#39;变量名&#39; value=&#39;比较的值&#39;&amp;gt;
&amp;lt;/比较标签&amp;gt;

&amp;lt;eq name=&#39;num&#39; value=&#39;10&#39;&amp;gt;num = 10 &amp;lt;/eq&amp;gt;
&amp;lt;eq name=&#39;num&#39; value=&#39;10&#39;&amp;gt;num = 10 &amp;lt;else /&amp;gt; num != 10 &amp;lt;/eq&amp;gt;
&amp;lt;compare name=&#39;num&#39; value=&#39;10&#39; type=&#39;eq&#39;&amp;gt; num = 10 &amp;lt;/compare&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-12&quot;&gt;区间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;in&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,2,3&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;else&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/in&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;notin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,2,3&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;else&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/notin&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;between&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,10&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/between&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;notbetween&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,10&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 不在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/between&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;range&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;num&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;1,11,12&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;in&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 在这个区间 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/range&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意：range只能替代in或者notin。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;三元运算符&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$num&amp;gt;11?&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;大于11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;不大于11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;php&quot;&gt;原生PHP&lt;/h3&gt;

&lt;p&gt;使用&lt;php&gt;&lt;/php&gt;。&lt;/p&gt;

&lt;h2 id=&quot;thinkphp-1&quot;&gt;ThinkPHP的调试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;程序入口添加：&lt;code class=&quot;highlighter-rouge&quot;&gt;define(&#39;APP_DEBUG&#39;, true);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;App/Conf/debug.php&lt;/code&gt;，这个配置文件中的配置在APP_DEBUG打开时会优先于默认配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;debug.php&lt;/code&gt;中开启页面trace信息：&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;SHOW_PAGE_TRACE&#39; =&amp;gt; true&lt;/code&gt;。常用的调试手段有：&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$this-&amp;gt;display();&lt;/code&gt;显示调试信息。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;trace(name,C(&quot;name&quot;))&lt;/code&gt;可以输出到调试界面中。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dump()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;G(&#39;run&#39;)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;echo G(&#39;run&#39;,&#39;end&#39;)&lt;/code&gt;获取此段代码的运行时间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-14&quot;&gt;数据库&lt;/h2&gt;

&lt;h3 id=&quot;section-15&quot;&gt;连接数据库&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;/App/Conf/config.php&lt;/code&gt;中定义：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;DB_TYPE&#39; =&amp;gt; &#39;mysql&#39;,
&#39;DB_HOST&#39; =&amp;gt; &#39;localhost&#39;,
&#39;DB_NAME&#39; =&amp;gt; &#39;muke&#39;,
&#39;DB_USER&#39; =&amp;gt; &#39;root&#39;,
&#39;DB_PWD&#39; =&amp;gt; &#39;root&#39;,
&#39;DB_PORT&#39; =&amp;gt; &#39;3306&#39;,
&#39;DB_PREFIX&#39; =&amp;gt; &#39;mk_&#39;,

//还可以加入其它主从数据库：
&#39;DB_HOST&#39; =&amp;gt; &#39;localhost,localhost2,localhost3&#39;,
//开启主从读写分离
&#39;DB_RW_SEPARATE&#39; =&amp;gt; true,
//多个主数据库服务器（前2个）
&#39;DB_MASTER_NUM&#39; =&amp;gt; &#39;2&#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-16&quot;&gt;实例化模型&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1.实例化基础模型model
$user = new Model(&#39;user&#39;);      //表名、表前缀、数据库连接信息
$user = M(&#39;user&#39;);              //同上，简写版
$data = $user-&amp;gt;select();

//2.实例化用户自定义模型
//---假设在/App/Lib/Model下建立有UserModel.class.php
class UserModel extends Model{
    public function getinfo(){
        ...
    }
}
//---则：
$user = new UserModel();
echo $user-&amp;gt;getinfo();
//或
$user = D(&#39;User&#39;);      //如果找不到用户自定义模型则会与M()相同。
$data=$user-&amp;gt;select();

//3.实例化公共模型（就是继承的思想）
//新建CommonModel.class.php：
class CommonModel extends Model{
    public function strmake($str){
        return md5($str);
    }
}
//然后让2中的Model继承自CommonModel。

//4.实例化空模型
$model = M();
$model-&amp;gt;query($sql);    //select，返回数据数组
$model-&amp;gt;execute($sql);  //update, insert，返回受影响行数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;curd&quot;&gt;CURD操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//add
$data=array(
    &#39;user_name&#39; =&amp;gt; &#39;xxxx&#39;,
    &#39;password&#39;  =&amp;gt; &#39;xxxx&#39;,
);
$datas = array(
    1 =&amp;gt; array(...),
    2 =&amp;gt; array(...),
);
M(&#39;User&#39;)-&amp;gt;add($data);      //返回主键
M(&#39;User&#39;)-&amp;gt;addAll($datas);  //返回第一条的主键，addAll只能用于MySQL，不能用于Oracle
echo M()-&amp;gt;getLastSql();     //返回最后一次SQL语句

//select
$data = M(&#39;User&#39;)-&amp;gt;select();    //调试模式会每次自动执行SHOW columns from `xxx1`。非调试模式会缓存结果到Runtime/Data文件夹。

//1.直接使用字符串进行查找
$data = M(&#39;User&#39;)-&amp;gt;where(&#39;id=1&#39;)-&amp;gt;select();

//2.使用数组方式进行查询
$where[&quot;id&quot;] = 1;
$where[&quot;username&quot;] = &quot;xxx&quot;;
$where[&quot;_logic&quot;] = &quot;or&quot;;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//3.表达式查询：array(&#39;表达式&#39;,&#39;查询条件&#39;);
$where[&quot;id&quot;] = array(&#39;lt&#39;, 3);
$where[&quot;id&quot;] = array(array(&#39;gt&#39;,1), array(&#39;lt&#39;,10));        //区间查询，默认and
$where[&quot;id&quot;] = array(array(&#39;gt&#39;,1), array(&#39;lt&#39;,10), or);
$where[&quot;age&quot;] = array(&#39;between&#39;, &#39;1,8&#39;);
$where[&quot;name&quot;] = array(&#39;like&#39;, &#39;%ming&#39;);
$where[&quot;name&quot;] = array(&#39;like&#39;, array(&#39;%ming&#39;, &#39;xiao%&#39;));
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//4.混合用法
$where[&#39;id&#39;] = array(&#39;gt&#39;,10);
$where[&#39;_string&#39;] = &#39;score &amp;gt; 10&#39;;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;select();

//5.统计用法：count, max, min, avg, sum，后四种必须传入参数。
M(&#39;User&#39;) -&amp;gt; count();
M(&#39;User&#39;) -&amp;gt; max(&#39;id&#39;);

//1和4不推荐，易被SQL注入。

//update
$update[&#39;score&#39;] = 60;
$where[&#39;id&#39;] = 1;
$data = M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;save($update);    //返回受影响行数
//其余用法同select

//delete
M(&#39;User&#39;)-&amp;gt;where($where)-&amp;gt;delete();         //返回受影响行数
M(&#39;User&#39;)-&amp;gt;delete(2);                       //根据主键删除
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;连贯操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1. order
$data = M(&#39;User&#39;)-&amp;gt;order(&#39;score desc, id asc&#39;)-&amp;gt;select();
//2. field，第二个参数默认false，如果是true，则是&quot;除外&quot;的意思
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;select();
//3. limit(length)、limit(start,length)和page(页码，每页条数=20)
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;limit(5)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;limit(1,5)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;id,username&#39;)-&amp;gt;order()-&amp;gt;page(1,5)-&amp;gt;select();
//4. group和having
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;score,count(*) as total&#39;)-&amp;gt;having(&#39;score&amp;gt;20&#39;)-&amp;gt;group(&#39;score&#39;)-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-18&quot;&gt;多表查询&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1. table方法：table(array(&#39;表名&#39;=&amp;gt;&#39;别名&#39;))，表名要加前缀。
$data = M()-&amp;gt;table(array(&#39;mk_user&#39; =&amp;gt; &#39;user&#39;, &#39;mk_userinfo&#39; =&amp;gt; &#39;info&#39;) )-&amp;gt;where(&#39;user.id=info.user_id&#39;)-&amp;gt;select();
//2. join方法：支持字符串和数组，默认左关联。字符串的话，可以多个join连接多个表。数组不行。
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;Right join mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(&#39;innert join mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;)-&amp;gt;select();
$data = M(&#39;user&#39;)-&amp;gt;join(array(&#39;mk_userinfo On mk_userinfo.user_id=mk_user.id&#39;))-&amp;gt;select();
//3. union查询：union(&#39;string/array&#39;, true/false)。若为true，则为unionAll查询，不过滤相同的记录。只能union字段相同的两个表。可以多次使用Union。
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;user_name&#39;)-&amp;gt;union(&#39;select user_name from mk_user2&#39;)-&amp;gt;select();
$data = M(&#39;User&#39;)-&amp;gt;field(&#39;user_name&#39;)-&amp;gt;union(array(&#39;field&#39;=&amp;gt;&#39;user_name&#39;,&#39;table&#39;=&amp;gt;&#39;mk_user2&#39;))-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-19&quot;&gt;过滤查询&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$data = M(&#39;User&#39;)-&amp;gt;distinct(true)-&amp;gt;field(&#39;score&#39;)-&amp;gt;select();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-20&quot;&gt;命名范围的使用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class UserModel extends CommonModel{
    protected $_scope = array(
        &quot;命名范围的标识名&quot; =&amp;gt; array(
            &quot;属性&quot; =&amp;gt; &quot;值&quot;,    //where limit field order table page having group distinct
        ), 
    );
}

调用：
$user = D(&#39;User);
$data = $user-&amp;gt;scope(&#39;命名范围的标识名&#39;)-&amp;gt;select(); //可以使用多个标识名，用逗号隔开，若有冲突，会取用后面一个。可以在scope后再添加其它限制，但是若存在冲突，还是会取后面一个。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 25 May 2016 23:55:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8ThinkPHP%E6%A1%86%E6%9E%B6-%E7%90%86%E8%AE%BA%E7%AF%87/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8ThinkPHP%E6%A1%86%E6%9E%B6-%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>Mac搭建PHP开发环境</title>
        <description>&lt;p&gt;注：之前做PHP的项目都是在Windows使用XAMPP一站式搞定Apache + MySQL + PHP的环境问题，这次我想要在OS X上用PHP实现下之前提到的秒杀系统，首先就需要体验一下在Unix/Linux环境中配置环境的过程。虽然任务不艰难但还是有些地方困扰到了我的，所以做一篇总结。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;方案选择&lt;/h2&gt;

&lt;p&gt;在Mac上搭建相关开发环境的方式网上有太多了，我总结了下，按照配置过程由简单到复杂、配置灵活性由小到大的顺序大致可以总结为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用系统自带Apache和PHP。Mac OS X已经整合了这两个，自然是最简单的，好像只要在httpd.conf里启用php相关的模块就可以直接使用了。但是系统里并没有整合MySQL。并且，看知乎上大家说会有一些问题，比如系统升级丢失模块配置等等。简单玩了玩就放弃了这种方案。&lt;/li&gt;
  &lt;li&gt;使用Xampp等GUI整合安装包。这个和Windows完全一样的感觉，没意思，用Unix/Linux就是要用CLI嘛。&lt;/li&gt;
  &lt;li&gt;使用Homebrew等包管理工具进行安装。这是我最后采用的方法。配置复杂度和灵活性都介于上下两种方案之间。&lt;/li&gt;
  &lt;li&gt;直接下载、编译和使用源码包。虽说这是使用开源软件最通用的方式，但是对于Apache这种感觉很牛的软件，这一次我不想太关注细节，万一出现编译错误或者一些不懂的细枝末节就有些浪费时间了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在开始吧~&lt;/p&gt;

&lt;h2 id=&quot;homebrew&quot;&gt;Homebrew的基本使用&lt;/h2&gt;

&lt;p&gt;Homebrew在Mac平台上也算是鼎鼎大名的软件了，自己老早就安装并且研究过。把常用的命令整理如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update                               //更新源
brew search  xxx                          //搜索包
brew install xxx                          //安装包
brew list                                 //已安装列表
brew uninstall xxx                        //卸载包
brew upgrade xxx                          //升级包
brew tap xxx                              //添加仓库
brew services list                        //已安装brew服务的状态
brew services start/stop/restart httpd24  //启动、停止、重启Apache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;apache&quot;&gt;Apache的安装&lt;/h2&gt;

&lt;p&gt;Apache并没有在homebrew的默认仓库中，要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap homebrew/apache&lt;/code&gt;来添加相应的仓库，或者直接运行以下命令进行安装，这里选择的是2.4版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install homebrew/apache/httpd24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据Homebrew的规则，默认安装到&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;目录下。二进制文件、配置文件、日志文件等都存放在其下的各子目录中。&lt;/p&gt;

&lt;h2 id=&quot;apache-1&quot;&gt;Apache的配置和虚拟主机&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;修改监听端口。&lt;/strong&gt;Apache默认监听8080端口，通过修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/apache2/2.4/httpd.conf&lt;/code&gt;中的下面一行更改至80端口。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  Listen 80
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;配置虚拟主机。&lt;/strong&gt;可以发现，默认服务器根目录是在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/var/www/htdocs&lt;/code&gt;目录下。我习惯将自己放在Github上的源代码全放在自己的Home下，又不想更改这个默认配置。所以我选择配置开启虚拟主机模块。取消掉这一行的注释即可：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  Include /usr/local/etc/apache2/2.4/extra/httpd-vhosts.conf
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;然后编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;httpd-vhosts.conf&lt;/code&gt;这个文件：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
ServerAdmin ifanze-local@outlook.com
DocumentRoot &quot;/Users/Fanze/Github/SeckillPHP&quot;
ServerName seckillphp.ifanze-local.cn
ErrorLog &quot;/usr/local/var/log/apache2/seckillphp.ifanze-local.cn-error_log&quot;
CustomLog &quot;/usr/local/var/log/apache2/seckillphp.ifanze-local.cn-access_log&quot; common
&amp;lt;Directory &quot;/Users/Fanze/Github/SeckillPHP/&quot;&amp;gt;
Options FollowSymLinks Indexes MultiViews
AllowOverride None
Require all granted
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;几点说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这里我使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;seckillphp.ifanze-local.cn&lt;/code&gt;作为ServerName，所以要修改host文件，要将它指向&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要Directory一段，无论是写在这个文件里还是在httpd.conf里。否则会遇到没权限访问的问题。其中的含义网上很容易找到，但需要注意，apache 2.4不同于旧版，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Require all granted&lt;/code&gt;替代了之前要写的&lt;code class=&quot;highlighter-rouge&quot;&gt;Order deny,allow&lt;/code&gt;等配置访问权限。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;控制Apache服务的开关。&lt;/strong&gt;注意到使用&lt;code class=&quot;highlighter-rouge&quot;&gt;which apachectl&lt;/code&gt;可以查看到apachectl已经从系统自带的apache路径自动改到了我们刚刚安装apache的路径下，所以可以直接使用以下命令控制apache开关：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo apachectl start
  sudo apachectl stop
 &lt;/code&gt;
 此外，同样自动为我们做好的还包括使用brew services：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo brew services start httpd24
  sudo brew services stop httpd24
 &lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;效果是相同的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP的安装&lt;/h2&gt;

&lt;p&gt;之前在Windows上使用的PHP版本是5.5或者5.6，取决于要连接的Oracle数据库是11g还是12c。截止到今天（2016年5月24日），PHP7已经正式发布并且最新版本已经到7.0.6了。看慕课网上的视频了解到PHP7主要的改进包括&lt;strong&gt;性能提升&lt;/strong&gt;和&lt;strong&gt;变量类型&lt;/strong&gt;。（艾玛这还是我认识的那个声明变量从来不用声明类型的PHP吗？）既然这次是自己自发进行的一次练习，就果断选择最新的版本用上吧！&lt;/p&gt;

&lt;p&gt;和apache一样，php也不在默认仓库中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install homebrew/php/php70
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装路径也默认和apache相似，不过安装完成后，如果直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt;php -v&lt;/code&gt;会发现还是系统自带的php。&lt;/p&gt;

&lt;h2 id=&quot;apachephp&quot;&gt;Apache配置PHP模块&lt;/h2&gt;

&lt;p&gt;PHP的安装路径下包括了供apache使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;libphp7.so&lt;/code&gt;模块。只需要配置httpd.conf文件，新增配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoadModule php7_module /usr/local/Cellar/php70/7.0.6/libexec/apache2/libphp7.so

&amp;lt;FilesMatch .php$&amp;gt;
    SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，FilesMatch部分也能够顾名思义。还有一处设置默认文档的地方也要增加一项&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;IfModule dir_module&amp;gt;
    DirectoryIndex index.html index.php
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启Apache。&lt;/p&gt;

&lt;h2 id=&quot;apachephp-1&quot;&gt;测试Apache+PHP&lt;/h2&gt;

&lt;p&gt;在虚拟主机的根目录下建立&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;，输出&lt;code class=&quot;highlighter-rouge&quot;&gt;phpinfo()&lt;/code&gt;，浏览器中打开Hostname就能看到预示着配置成功的页面了~&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;安装MySQL&lt;/h2&gt;

&lt;p&gt;安装SQL走了一些弯路，刚开始也想用Homebrew来安装，但是安装完成后无法找到默认的Root密码（5.9之前的版本是没有密码的。），官方的文档上这一块也没有较明确的说明，只是推荐下载dwg包进行安装。所以最后就是用的这个方法，下载安装都很快。并且将MySQL的开关集成在了系统偏好设置里。可能因为我用各种方法装了删、删了又装好多次，最后一遍安装完毕后重启了下电脑才正常启动MySQL服务的。&lt;/p&gt;

&lt;p&gt;默认密码在安装完成后会弹窗提示，也会保留在OS X的通知栏里，建议截图保存并及时修改。&lt;/p&gt;

&lt;p&gt;这里记录一下卸载MySQL的步骤：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
sudo vim /etc/hostconfig and removed the line MYSQLCOM=-YES-
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mysql-1&quot;&gt;配置MySQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/mysql/bin&lt;/code&gt;添加到环境变量PATH。我使用zsh，所以修改&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改root用户的默认密码。执行下面命令即可，先输入旧密码，再输入两遍新密码。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqladmin -u root -p password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;登录mysql。执行下面的命令，输入新密码，成功就表示MySQL配置成功：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以使用Navicat Premium等软件对数据库进行管理了。以后有空的时候再装个phpmyadmin吧。&lt;/p&gt;

&lt;h2 id=&quot;php-1&quot;&gt;配置PHP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PHP的配置文件在&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/php/7.0&lt;/code&gt;目录下，从默认配置拷贝一份：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp /etc/php.ini.default /etc/php.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;至于PHP连接mysql的方式（mysql、mysqli、pdo），就根据需求来吧。在&lt;code class=&quot;highlighter-rouge&quot;&gt;php.ini&lt;/code&gt;中开启相应的模块就行。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 May 2016 18:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/Mac%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/Mac%E6%90%AD%E5%BB%BAPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        
        <category>Mac</category>
        
        <category>Apache</category>
        
        <category>MySQL</category>
        
        <category>PHP</category>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>【慕课网】Java高并发秒杀API（三）：Web层</title>
        <description>&lt;p&gt;注：续前文。本篇主要是Web层的开发，主要是使用Bootstrap进行页面的简单布置和用Javascript书写前端的交互逻辑。其中有很多细节值得我学习，比如Javascript代码的模块化。&lt;/p&gt;

&lt;p&gt;看完这部视频后更加觉得，这个项目必须要自己做一遍。我打算趁着这几天比较闲，按照视频中的思路，将这个秒杀系统用PHP实现出来，因为自己太久没有用PHP写项目了，借此也可以学一些PHP中的MVC等框架，就像视频中使用的Java的SpringMVC那样。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;目录：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main
--resources
    --mapper
        SeckillDao.xml
        SuccessKilledDao.xml
    --spring
        spring-dao.xml
        spring-service.xml
        spring-web.xml
    mybatis-config.xml
--webapp
    --resources
    --WEB-INF
        web.xml
    index.jsp
--java
    --org.seckill
        --dao
        --entity
        --service
            --impl
                SeckillServiceImpl
            SeckillService
        --exception
        --dto           数据传输层
        --enums
            SeckillStateEnum
        --web
            SeckillController
--sql

test
--java
--resources
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;restful&quot;&gt;设计Restful接口&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;前端交互流程设计&lt;/h3&gt;

&lt;h3 id=&quot;restful-1&quot;&gt;学习Restful接口设计&lt;/h3&gt;

&lt;p&gt;兴起于：Ruby on Rails，一种优雅的URI表述方式，是一种资源的状态和状态的转移。&lt;/p&gt;

&lt;p&gt;GET /seckill/list
POST /seckill/{id}/execution
DELETE /seckill/{id}/delete&lt;/p&gt;

&lt;p&gt;GET：查询
POST：添加/修改(非逆等)
PUT：修改
DELETE：删除&lt;/p&gt;

&lt;p&gt;URL设计：/模块/资源/{标示}/集合1/…&lt;/p&gt;

&lt;p&gt;实例：秒杀URL设计：
GET /seckill/list &amp;gt; 秒杀列表
GET /seckill/{id}/detail &amp;gt; 详情页
GET /seckill/time/now &amp;gt; 系统时间
POST /seckill/{id}/exposer &amp;gt; 暴露秒杀
POST /seckill/{id}/{md5}/execution &amp;gt; 执行秒杀&lt;/p&gt;

&lt;h2 id=&quot;springmvcspring&quot;&gt;SpringMVC集合spring&lt;/h2&gt;

&lt;h3 id=&quot;springmvc&quot;&gt;使用SpringMVC理论&lt;/h3&gt;

&lt;p&gt;围绕Handler开发：Handler产出Model和View。&lt;/p&gt;

&lt;h4 id=&quot;sprintmvc&quot;&gt;SprintMVC运行流程&lt;/h4&gt;

&lt;h4 id=&quot;http&quot;&gt;HTTP请求地址映射原理&lt;/h4&gt;

&lt;p&gt;使用注解：@RequestMapping。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;请求方法细节处理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;请求参数绑定&lt;/li&gt;
  &lt;li&gt;请求方式限制&lt;/li&gt;
  &lt;li&gt;请求转发和重定向&lt;/li&gt;
  &lt;li&gt;数据模型赋值&lt;/li&gt;
  &lt;li&gt;返回Json数据&lt;/li&gt;
  &lt;li&gt;cookie访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003766491.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;springmvc-1&quot;&gt;整合配置SpringMVC框架&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;配置DispatcherServlet：配置SpringMVC需要加载的配置文件：spring-dao.xml、spring-service.xml、spring-web.xml。&lt;/li&gt;
  &lt;li&gt;配置spring-web.xml：配置SpringMVC：
    &lt;ul&gt;
      &lt;li&gt;开启SpringMVC注解模式。（简化配置：自动注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter；提供一系列功能：数据绑定、数字和日期的转换@NumberFormat、@DateTimeFormat，xml和json默认读写支持。）&lt;/li&gt;
      &lt;li&gt;静态资源默认servlet配置（加入对静态资源的处理：js/git/png…，允许使用”/”做整体映射）&lt;/li&gt;
      &lt;li&gt;配置jsp显示ViewResolver.&lt;/li&gt;
      &lt;li&gt;扫描web相关的bean。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;restful-2&quot;&gt;实现Restful接口&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新建SeckillController。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//类似于@Service @Component，目的是放入spring容器&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/seckill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//url:/模块/资源/{id}/细分  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeckillController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取列表页&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSeckillList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//list.jsp + model = ModelAndView&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// /WEB-INF/jsp/&quot;list&quot;.jsp&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;seckillId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:/seckill/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Seckill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sekill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;forward:/seckill/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;seckill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//ajax json&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/exposer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponsBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Exposer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seckillService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exportSeckillUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//给result赋值，使用try catch&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{seckillId}/{md5}/execution&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponsBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeckillException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(.....){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里参数killPhone使用cookie&lt;/span&gt;
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/time/now&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeckillResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;创建class SeckillResult&lt;t&gt;，包括boolean success、T data、String error，用于封装json结果，返回ajax结果。&lt;/t&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bootstrap&quot;&gt;基于bootstrap开发页面结构&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;WEB-INFO/jsp下建立页面：detail.jsp、list.jsp。建立文件夹common放置公共的head.jsp，包括所有的&lt;link /&gt;标签。&lt;/li&gt;
  &lt;li&gt;尽量使用CDN托管js库！！！&lt;/li&gt;
  &lt;li&gt;使用了JQuery cookie和JQuery countDown插件。&lt;/li&gt;
  &lt;li&gt;要用&lt;script&gt;&lt;/script&gt;，而不是&lt;script&gt;&lt;/script&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cookie&quot;&gt;Cookie登录交互、计时交互、秒杀交互&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;javascript做到模块化，模拟包：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seckill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//封装秒杀相关ajax的url&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/seckill/time/now&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//验证手机号&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;validatePhone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//时间判断，为了减少detail代码和代码复用。&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nowTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//获取秒杀地址，控制显示逻辑，执行秒杀&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;handleSeckillKill&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckillId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//详情页秒杀逻辑&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//详情页初始化&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//手机验证和登录，计时交互&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//规范我们的交互流程：params包括seckillId、startTime、endTime&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//在cookie中查找手机号（因为这里没有用到相关登录的后端，使用cookie替代）&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//验证手机，提出一个独立的方法validatePhone&lt;/span&gt;
                
                &lt;span class=&quot;c1&quot;&gt;//已经登录&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//计时交互&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seckill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;success&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;//时间判断&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(....);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;web&quot;&gt;web层课程总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;技术回顾：前端交互设计过程、Restful接口设计、SpringMVC使用技巧、Bootstrap和JS的使用&lt;/li&gt;
  &lt;li&gt;前端交互设计（前端、产品、后端）：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003907843.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringMVC：配置和运行流程、DTO传递数据、注解映射驱动。&lt;/li&gt;
  &lt;li&gt;SpringMVC运行流程：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14640003986865.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 23 May 2016 19:00:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%89-Web%E5%B1%82/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80API-%E4%B8%89-Web%E5%B1%82/</guid>
        
        <category>Java</category>
        
        <category>Web前端</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
      <item>
        <title>【慕课网】数据库设计那些事</title>
        <description>&lt;p&gt;注：这是看了慕课网上一个视频的笔记。是比较基础的数据库相关的知识，比如范式，并且还对数据库设计时需要注意的问题和一些经验性的内容做了分享。原视频链接：&lt;a href=&quot;http://www.imooc.com/learn/117&quot;&gt;http://www.imooc.com/learn/117&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;为什么要进行数据库设计&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;减少数据冗余&lt;/li&gt;
  &lt;li&gt;避免数据维护异常&lt;/li&gt;
  &lt;li&gt;节约存储空间&lt;/li&gt;
  &lt;li&gt;高效访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;数据库设计步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;需求分析：数据是什么、有哪些属性、数据和属性有哪些特点&lt;/li&gt;
  &lt;li&gt;逻辑设计：用ER图逻辑建模&lt;/li&gt;
  &lt;li&gt;物理设计：根据数据库自身的特点&lt;/li&gt;
  &lt;li&gt;维护优化：新的需求进行建表、索引优化、大表拆分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;需求分析&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;作用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;了解系统中所要存储的数据&lt;/li&gt;
  &lt;li&gt;了解数据的存储特点（时效性：过期清理；日志：不适合放在数据库中，或者注意定制清理规则。分库分表？归档？）&lt;/li&gt;
  &lt;li&gt;了解数据的生命周期&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;搞清楚一些问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实体及实体间的关系（1对1，1对多，多对多）&lt;/li&gt;
  &lt;li&gt;实体的属性有什么？&lt;/li&gt;
  &lt;li&gt;唯一标识实体的属性或属性组合？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;举例：电商网站&lt;/h3&gt;

&lt;p&gt;用户模块、商品模块、订单模块、购物车模块、供应商模块&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;用户模块&lt;/h4&gt;

&lt;p&gt;用户名、密码、电话、邮箱、身份证号、地址、姓名、昵称……&lt;/p&gt;

&lt;p&gt;存储特点：组件增加，要永久存储&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;商品模块&lt;/h4&gt;

&lt;p&gt;商品编码、商品名称、描述、品类、供应商名称、重量、有效期、价格……&lt;/p&gt;

&lt;p&gt;存储特点：对于下线商品可以归档存储&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;订单模块&lt;/h4&gt;

&lt;p&gt;订单号、用户姓名、电话、收货地址、商品编号、商品名称、数量、价格、订单状态、订单类型……&lt;/p&gt;

&lt;p&gt;存储特点：永久存储（分表、分库存储）&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;购物车模块&lt;/h4&gt;

&lt;p&gt;存储特点：不用永久存储（设置归档、清理规则）&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;供应商模块&lt;/h4&gt;

&lt;p&gt;存储特点：永久存储&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639346317272.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;逻辑设计&lt;/h2&gt;

&lt;h3 id=&quot;section-12&quot;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;将需求转化为数据库的逻辑模型&lt;/li&gt;
  &lt;li&gt;用ER图进行展示&lt;/li&gt;
  &lt;li&gt;与所选用的具体DBMS无关&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;名词&lt;/h3&gt;

&lt;p&gt;关系、元组、属性、候选码、主码、域、分量&lt;/p&gt;

&lt;h3 id=&quot;er&quot;&gt;ER图例&lt;/h3&gt;

&lt;p&gt;实体、联系、属性、连接线&lt;/p&gt;

&lt;h3 id=&quot;nf&quot;&gt;设计范式（NF）&lt;/h3&gt;

&lt;p&gt;第一范式、第二范式、第三范式及BC范式，另还有第四、第五范式。&lt;/p&gt;

&lt;h4 id=&quot;section-14&quot;&gt;操作异常&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;插入异常&lt;/li&gt;
  &lt;li&gt;更新异常&lt;/li&gt;
  &lt;li&gt;删除异常&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-15&quot;&gt;数据冗余&lt;/h4&gt;

&lt;p&gt;相同的数据在多个地方存在，或者某个列由其它列计算得到。&lt;/p&gt;

&lt;h4 id=&quot;section-16&quot;&gt;第一范式&lt;/h4&gt;

&lt;p&gt;定义：数据库表中的所有字段都是单一属性，不可再分的。即表都是二维表。&lt;/p&gt;

&lt;p&gt;单一属性是由基本的数据类型所构成。&lt;/p&gt;

&lt;h4 id=&quot;section-17&quot;&gt;第二范式&lt;/h4&gt;

&lt;p&gt;定义：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖。&lt;/p&gt;

&lt;p&gt;部分函数依赖：存在组合关键字中的某一关键字决定非关键字的情况。&lt;/p&gt;

&lt;p&gt;所有单关键字段的表都符合第二范式。&lt;/p&gt;

&lt;p&gt;不符合第二范式的例子：
&lt;img src=&quot;/images/posts/14639346577960.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为存在部分函数依赖：
(商品名称) -&amp;gt; (价格，描述，重量，有效期)
(供应商名称) -&amp;gt; (供应商电话)&lt;/p&gt;

&lt;p&gt;存在的问题：插入异常、删除异常、更新异常、数据冗余。&lt;/p&gt;

&lt;p&gt;解决方式：
&lt;img src=&quot;/images/posts/14639346749155.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-18&quot;&gt;第三范式&lt;/h4&gt;

&lt;p&gt;定义：如果数据表中不存在非关键字段，对任意候选关键字段的传递函数依赖，则符合第三范式。&lt;/p&gt;

&lt;p&gt;实例：
&lt;img src=&quot;/images/posts/14639346844892.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(商品名称) -&amp;gt; (分类) -&amp;gt; (分类描述)&lt;/p&gt;

&lt;p&gt;存在问题：数据冗余、插入异常、更新异常、删除异常。&lt;/p&gt;

&lt;p&gt;解决：
&lt;img src=&quot;/images/posts/14639346929465.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;bc&quot;&gt;BC范式&lt;/h4&gt;

&lt;p&gt;定义：Boyce.Codd范式，数据库表中如果不存在任何字段对任一候选关键字段的传递函数依赖则符合BCNF。&lt;/p&gt;

&lt;p&gt;实例：
&lt;img src=&quot;/images/posts/14639347213896.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假定：供应商:供应商联系人 = 1:多，供应商:商品 = 1:多&lt;/p&gt;

&lt;p&gt;(供应商，商品ID) -&amp;gt; (联系人，商品数量)
(联系人，商品ID) -&amp;gt;（供应商，商品数量）&lt;/p&gt;

&lt;p&gt;存在：&lt;/p&gt;

&lt;p&gt;(供应商) -&amp;gt; (供应商联系人)
(供应商联系人) -&amp;gt; (供应商)&lt;/p&gt;

&lt;p&gt;所以不符合BCNF。&lt;/p&gt;

&lt;p&gt;解决：
&lt;img src=&quot;/images/posts/14639347354230.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;此处存疑，知乎上的讨论更好一些：&lt;a href=&quot;https://www.zhihu.com/question/24696366&quot;&gt;https://www.zhihu.com/question/24696366&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-19&quot;&gt;物理设计&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;选择合适的DBMS&lt;/li&gt;
  &lt;li&gt;定义数据库、表、字段的命名规范&lt;/li&gt;
  &lt;li&gt;选择合适的字段类型&lt;/li&gt;
  &lt;li&gt;反范式化设计（用空间换取时间）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dbms&quot;&gt;常见DBMS系统&lt;/h3&gt;

&lt;p&gt;商业数据库：Oracle、SQLServer（企业级项目）
开源数据库：MySQL、PgSQL（互联网项目）&lt;/p&gt;

&lt;p&gt;对事务操作要求较高：Oracle&lt;/p&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL常用数据引擎&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639347733735.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;表和字段命名规则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可读性原则&lt;/li&gt;
  &lt;li&gt;表意性原则&lt;/li&gt;
  &lt;li&gt;长名原则&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-21&quot;&gt;字段类型选择原则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;数字类型 &amp;gt; 日期/二进制 &amp;gt; 字符类型（优先空间小的类型）&lt;/li&gt;
  &lt;li&gt;如：birthday: Int &amp;gt; Datetime &amp;gt; Char(10) &amp;gt; varchar(20)&lt;/li&gt;
  &lt;li&gt;MySQL的TIMESTAMP只能存到2037年&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/14639347821112.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从两个角度考虑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;进行数据比较操作时（查询、Join、排序等）：字符处理比数字慢&lt;/li&gt;
  &lt;li&gt;数据处理以页为单位，列长度越小，利于性能提升&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;char与varchar：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;若列中存储的数据长度差不多是一致的，用char&lt;/li&gt;
  &lt;li&gt;最大数据长度小于50字节，也考虑用char&lt;/li&gt;
  &lt;li&gt;不宜定义大于50字节的char类型&lt;/li&gt;
  &lt;li&gt;注意UTF8每个汉字占3个字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;decimal与float：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;decimal存储精确数据&lt;/li&gt;
  &lt;li&gt;float存储空间开销更小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;时间类型如何存储&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用int：长度比datetime小，使用不方便，要转换，只能存到2038-1-19 11:14:07&lt;/li&gt;
  &lt;li&gt;根据需要存储的时间粒度选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-22&quot;&gt;其它&lt;/h3&gt;

&lt;h4 id=&quot;section-23&quot;&gt;如何选择主键&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;区分业务主键和数据库主键，前者用于标识，后者是为了优化数据存储&lt;/li&gt;
  &lt;li&gt;考虑是否要顺序增长&lt;/li&gt;
  &lt;li&gt;主键所占空间要尽可能小（使用聚集索引的表，每个索引后会附加主键信息）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-24&quot;&gt;避免使用外键约束&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;降低数据导入效率&lt;/li&gt;
  &lt;li&gt;增加维护成本&lt;/li&gt;
  &lt;li&gt;虽不建议，但相关联的列上一定要建立索引&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-25&quot;&gt;避免使用触发器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;降低数据导入的效率&lt;/li&gt;
  &lt;li&gt;可能会出现意想不到的数据异常&lt;/li&gt;
  &lt;li&gt;使业务逻辑变复杂&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-26&quot;&gt;预留字段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;无法准确知道预留字段的类型&lt;/li&gt;
  &lt;li&gt;无法准确知道预留字段的内容&lt;/li&gt;
  &lt;li&gt;后期维护预留字段的成本同增加一个字段的成本相同&lt;/li&gt;
  &lt;li&gt;严禁使用预留字段！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-27&quot;&gt;反范式化表设计&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用空间换时间&lt;/li&gt;
  &lt;li&gt;对第三范式进行违反&lt;/li&gt;
  &lt;li&gt;一定要适度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-28&quot;&gt;维护和优化&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;维护数据字典&lt;/li&gt;
  &lt;li&gt;维护索引&lt;/li&gt;
  &lt;li&gt;维护表结构&lt;/li&gt;
  &lt;li&gt;在适当的时候对表进行水平拆分或垂直拆分&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-29&quot;&gt;维护数据字典&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用第三方工具&lt;/li&gt;
  &lt;li&gt;使用备注字段，可以用select语句导出&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-30&quot;&gt;维护索引&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;出现在Where、group by、order by从句中的列&lt;/li&gt;
  &lt;li&gt;可选择性高的列要放到索引的前面&lt;/li&gt;
  &lt;li&gt;索引中不要包括太长的数据类型&lt;/li&gt;
  &lt;li&gt;并不是越多越好，过多的索引对读写都不好&lt;/li&gt;
  &lt;li&gt;定期维护索引碎片&lt;/li&gt;
  &lt;li&gt;在SQL语句中不要使用强制索引关键字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-31&quot;&gt;维护表结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用在线变更表结构的工具&lt;/li&gt;
  &lt;li&gt;同时对数据字典进行维护&lt;/li&gt;
  &lt;li&gt;控制表的宽度和大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-32&quot;&gt;数据库中适合的操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;批量操作比逐条操作好&lt;/li&gt;
  &lt;li&gt;禁止使用select *&lt;/li&gt;
  &lt;li&gt;控制使用自定义函数&lt;/li&gt;
  &lt;li&gt;不要使用全文索引&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-33&quot;&gt;表的拆分&lt;/h3&gt;

&lt;h4 id=&quot;section-34&quot;&gt;垂直拆分：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;经常一起查询的列放一起&lt;/li&gt;
  &lt;li&gt;text,blob等大字段拆分到附加表中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-35&quot;&gt;水平拆分：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;为了控制表的大小。&lt;/li&gt;
  &lt;li&gt;常用方式：主键Hash&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 22 May 2016 23:05:40 +0800</pubDate>
        <link>http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://iFanze.cn//2016/05/%E6%85%95%E8%AF%BE%E7%BD%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>数据库</category>
        
        
        <category>笔记</category>
        
        <category>@慕课网</category>
        
      </item>
    
  </channel>
</rss>
